/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ChartDataFilter
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-06T17:36:10.263+01:00[Europe/Vienna]")
public class ChartDataFilter {
  @SerializedName("col")
  private String col = null;

  /**
   * The comparison operator.
   */
  @JsonAdapter(OpEnum.Adapter.class)
  public enum OpEnum {
    _("=="),
    NOT_EQUAL("!="),
    GREATER_THAN(">"),
    LESS_THAN("<"),
    GREATER_THAN_OR_EQUAL_TO(">="),
    LESS_THAN_OR_EQUAL_TO("<="),
    LIKE("LIKE"),
    IS_NULL("IS NULL"),
    IS_NOT_NULL("IS NOT NULL"),
    IN("IN"),
    NOT_IN("NOT IN"),
    REGEX("REGEX");

    private String value;

    OpEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OpEnum fromValue(String text) {
      for (OpEnum b : OpEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OpEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OpEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OpEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OpEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("op")
  private OpEnum op = null;

  @SerializedName("val")
  private Object val = null;

  public ChartDataFilter col(String col) {
    this.col = col;
    return this;
  }

   /**
   * The column to filter.
   * @return col
  **/
  @Schema(example = "country", required = true, description = "The column to filter.")
  public String getCol() {
    return col;
  }

  public void setCol(String col) {
    this.col = col;
  }

  public ChartDataFilter op(OpEnum op) {
    this.op = op;
    return this;
  }

   /**
   * The comparison operator.
   * @return op
  **/
  @Schema(example = "IN", required = true, description = "The comparison operator.")
  public OpEnum getOp() {
    return op;
  }

  public void setOp(OpEnum op) {
    this.op = op;
  }

  public ChartDataFilter val(Object val) {
    this.val = val;
    return this;
  }

   /**
   * The value or values to compare against. Can be a string, integer, decimal or list, depending on the operator.
   * @return val
  **/
  @Schema(example = "[\"China\",\"France\",\"Japan\"]", description = "The value or values to compare against. Can be a string, integer, decimal or list, depending on the operator.")
  public Object getVal() {
    return val;
  }

  public void setVal(Object val) {
    this.val = val;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartDataFilter chartDataFilter = (ChartDataFilter) o;
    return Objects.equals(this.col, chartDataFilter.col) &&
        Objects.equals(this.op, chartDataFilter.op) &&
        Objects.equals(this.val, chartDataFilter.val);
  }

  @Override
  public int hashCode() {
    return Objects.hash(col, op, val);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartDataFilter {\n");
    
    sb.append("    col: ").append(toIndentedString(col)).append("\n");
    sb.append("    op: ").append(toIndentedString(op)).append("\n");
    sb.append("    val: ").append(toIndentedString(val)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
