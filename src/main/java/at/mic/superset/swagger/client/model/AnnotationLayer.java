/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * AnnotationLayer
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-08-29T14:48:42.974+02:00[Europe/Berlin]")
public class AnnotationLayer {
  /**
   * Type of annotation layer
   */
  @JsonAdapter(AnnotationTypeEnum.Adapter.class)
  public enum AnnotationTypeEnum {
    FORMULA("FORMULA"),
    INTERVAL("INTERVAL"),
    EVENT("EVENT"),
    TIME_SERIES("TIME_SERIES");

    private String value;

    AnnotationTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AnnotationTypeEnum fromValue(String input) {
      for (AnnotationTypeEnum b : AnnotationTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AnnotationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnnotationTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AnnotationTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AnnotationTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("annotationType")
  private AnnotationTypeEnum annotationType = null;

  @SerializedName("color")
  private String color = null;

  @SerializedName("descriptionColumns")
  private List<String> descriptionColumns = null;

  @SerializedName("hideLine")
  private Boolean hideLine = null;

  @SerializedName("intervalEndColumn")
  private String intervalEndColumn = null;

  @SerializedName("name")
  private String name = null;

  /**
   * Opacity of layer
   */
  @JsonAdapter(OpacityEnum.Adapter.class)
  public enum OpacityEnum {
    EMPTY(""),
    OPACITYLOW("opacityLow"),
    OPACITYMEDIUM("opacityMedium"),
    OPACITYHIGH("opacityHigh");

    private String value;

    OpacityEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OpacityEnum fromValue(String input) {
      for (OpacityEnum b : OpacityEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OpacityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OpacityEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public OpacityEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return OpacityEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("opacity")
  private OpacityEnum opacity = null;

  @SerializedName("overrides")
  private Map<String, Object> overrides = null;

  @SerializedName("show")
  private Boolean show = null;

  @SerializedName("showLabel")
  private Boolean showLabel = null;

  @SerializedName("showMarkers")
  private Boolean showMarkers = null;

  /**
   * Type of source for annotation data
   */
  @JsonAdapter(SourceTypeEnum.Adapter.class)
  public enum SourceTypeEnum {
    EMPTY(""),
    LINE("line"),
    NATIVE("NATIVE"),
    TABLE("table");

    private String value;

    SourceTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SourceTypeEnum fromValue(String input) {
      for (SourceTypeEnum b : SourceTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SourceTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("sourceType")
  private SourceTypeEnum sourceType = null;

  /**
   * Line style. Only applies to time-series annotations
   */
  @JsonAdapter(StyleEnum.Adapter.class)
  public enum StyleEnum {
    DASHED("dashed"),
    DOTTED("dotted"),
    SOLID("solid"),
    LONGDASHED("longDashed");

    private String value;

    StyleEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StyleEnum fromValue(String input) {
      for (StyleEnum b : StyleEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StyleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StyleEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StyleEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StyleEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("style")
  private StyleEnum style = null;

  @SerializedName("timeColumn")
  private String timeColumn = null;

  @SerializedName("titleColumn")
  private String titleColumn = null;

  @SerializedName("value")
  private Object value = null;

  @SerializedName("width")
  private Float width = null;

  public AnnotationLayer annotationType(AnnotationTypeEnum annotationType) {
    this.annotationType = annotationType;
    return this;
  }

   /**
   * Type of annotation layer
   * @return annotationType
  **/
  @Schema(description = "Type of annotation layer")
  public AnnotationTypeEnum getAnnotationType() {
    return annotationType;
  }

  public void setAnnotationType(AnnotationTypeEnum annotationType) {
    this.annotationType = annotationType;
  }

  public AnnotationLayer color(String color) {
    this.color = color;
    return this;
  }

   /**
   * Layer color
   * @return color
  **/
  @Schema(description = "Layer color")
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }

  public AnnotationLayer descriptionColumns(List<String> descriptionColumns) {
    this.descriptionColumns = descriptionColumns;
    return this;
  }

  public AnnotationLayer addDescriptionColumnsItem(String descriptionColumnsItem) {
    if (this.descriptionColumns == null) {
      this.descriptionColumns = new ArrayList<String>();
    }
    this.descriptionColumns.add(descriptionColumnsItem);
    return this;
  }

   /**
   * Columns to use as the description. If none are provided, all will be shown.
   * @return descriptionColumns
  **/
  @Schema(description = "Columns to use as the description. If none are provided, all will be shown.")
  public List<String> getDescriptionColumns() {
    return descriptionColumns;
  }

  public void setDescriptionColumns(List<String> descriptionColumns) {
    this.descriptionColumns = descriptionColumns;
  }

  public AnnotationLayer hideLine(Boolean hideLine) {
    this.hideLine = hideLine;
    return this;
  }

   /**
   * Should line be hidden. Only applies to line annotations
   * @return hideLine
  **/
  @Schema(description = "Should line be hidden. Only applies to line annotations")
  public Boolean isHideLine() {
    return hideLine;
  }

  public void setHideLine(Boolean hideLine) {
    this.hideLine = hideLine;
  }

  public AnnotationLayer intervalEndColumn(String intervalEndColumn) {
    this.intervalEndColumn = intervalEndColumn;
    return this;
  }

   /**
   * Column containing end of interval. Only applies to interval layers
   * @return intervalEndColumn
  **/
  @Schema(description = "Column containing end of interval. Only applies to interval layers")
  public String getIntervalEndColumn() {
    return intervalEndColumn;
  }

  public void setIntervalEndColumn(String intervalEndColumn) {
    this.intervalEndColumn = intervalEndColumn;
  }

  public AnnotationLayer name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of layer
   * @return name
  **/
  @Schema(required = true, description = "Name of layer")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public AnnotationLayer opacity(OpacityEnum opacity) {
    this.opacity = opacity;
    return this;
  }

   /**
   * Opacity of layer
   * @return opacity
  **/
  @Schema(description = "Opacity of layer")
  public OpacityEnum getOpacity() {
    return opacity;
  }

  public void setOpacity(OpacityEnum opacity) {
    this.opacity = opacity;
  }

  public AnnotationLayer overrides(Map<String, Object> overrides) {
    this.overrides = overrides;
    return this;
  }

  public AnnotationLayer putOverridesItem(String key, Object overridesItem) {
    if (this.overrides == null) {
      this.overrides = new HashMap<String, Object>();
    }
    this.overrides.put(key, overridesItem);
    return this;
  }

   /**
   * which properties should be overridable
   * @return overrides
  **/
  @Schema(description = "which properties should be overridable")
  public Map<String, Object> getOverrides() {
    return overrides;
  }

  public void setOverrides(Map<String, Object> overrides) {
    this.overrides = overrides;
  }

  public AnnotationLayer show(Boolean show) {
    this.show = show;
    return this;
  }

   /**
   * Should the layer be shown
   * @return show
  **/
  @Schema(required = true, description = "Should the layer be shown")
  public Boolean isShow() {
    return show;
  }

  public void setShow(Boolean show) {
    this.show = show;
  }

  public AnnotationLayer showLabel(Boolean showLabel) {
    this.showLabel = showLabel;
    return this;
  }

   /**
   * Should the label always be shown
   * @return showLabel
  **/
  @Schema(description = "Should the label always be shown")
  public Boolean isShowLabel() {
    return showLabel;
  }

  public void setShowLabel(Boolean showLabel) {
    this.showLabel = showLabel;
  }

  public AnnotationLayer showMarkers(Boolean showMarkers) {
    this.showMarkers = showMarkers;
    return this;
  }

   /**
   * Should markers be shown. Only applies to line annotations.
   * @return showMarkers
  **/
  @Schema(required = true, description = "Should markers be shown. Only applies to line annotations.")
  public Boolean isShowMarkers() {
    return showMarkers;
  }

  public void setShowMarkers(Boolean showMarkers) {
    this.showMarkers = showMarkers;
  }

  public AnnotationLayer sourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
    return this;
  }

   /**
   * Type of source for annotation data
   * @return sourceType
  **/
  @Schema(description = "Type of source for annotation data")
  public SourceTypeEnum getSourceType() {
    return sourceType;
  }

  public void setSourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
  }

  public AnnotationLayer style(StyleEnum style) {
    this.style = style;
    return this;
  }

   /**
   * Line style. Only applies to time-series annotations
   * @return style
  **/
  @Schema(description = "Line style. Only applies to time-series annotations")
  public StyleEnum getStyle() {
    return style;
  }

  public void setStyle(StyleEnum style) {
    this.style = style;
  }

  public AnnotationLayer timeColumn(String timeColumn) {
    this.timeColumn = timeColumn;
    return this;
  }

   /**
   * Column with event date or interval start date
   * @return timeColumn
  **/
  @Schema(description = "Column with event date or interval start date")
  public String getTimeColumn() {
    return timeColumn;
  }

  public void setTimeColumn(String timeColumn) {
    this.timeColumn = timeColumn;
  }

  public AnnotationLayer titleColumn(String titleColumn) {
    this.titleColumn = titleColumn;
    return this;
  }

   /**
   * Column with title
   * @return titleColumn
  **/
  @Schema(description = "Column with title")
  public String getTitleColumn() {
    return titleColumn;
  }

  public void setTitleColumn(String titleColumn) {
    this.titleColumn = titleColumn;
  }

  public AnnotationLayer value(Object value) {
    this.value = value;
    return this;
  }

   /**
   * For formula annotations, this contains the formula. For other types, this is the primary key of the source object.
   * @return value
  **/
  @Schema(required = true, description = "For formula annotations, this contains the formula. For other types, this is the primary key of the source object.")
  public Object getValue() {
    return value;
  }

  public void setValue(Object value) {
    this.value = value;
  }

  public AnnotationLayer width(Float width) {
    this.width = width;
    return this;
  }

   /**
   * Width of annotation line
   * minimum: 0
   * @return width
  **/
  @Schema(description = "Width of annotation line")
  public Float getWidth() {
    return width;
  }

  public void setWidth(Float width) {
    this.width = width;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnnotationLayer annotationLayer = (AnnotationLayer) o;
    return Objects.equals(this.annotationType, annotationLayer.annotationType) &&
        Objects.equals(this.color, annotationLayer.color) &&
        Objects.equals(this.descriptionColumns, annotationLayer.descriptionColumns) &&
        Objects.equals(this.hideLine, annotationLayer.hideLine) &&
        Objects.equals(this.intervalEndColumn, annotationLayer.intervalEndColumn) &&
        Objects.equals(this.name, annotationLayer.name) &&
        Objects.equals(this.opacity, annotationLayer.opacity) &&
        Objects.equals(this.overrides, annotationLayer.overrides) &&
        Objects.equals(this.show, annotationLayer.show) &&
        Objects.equals(this.showLabel, annotationLayer.showLabel) &&
        Objects.equals(this.showMarkers, annotationLayer.showMarkers) &&
        Objects.equals(this.sourceType, annotationLayer.sourceType) &&
        Objects.equals(this.style, annotationLayer.style) &&
        Objects.equals(this.timeColumn, annotationLayer.timeColumn) &&
        Objects.equals(this.titleColumn, annotationLayer.titleColumn) &&
        Objects.equals(this.value, annotationLayer.value) &&
        Objects.equals(this.width, annotationLayer.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotationType, color, descriptionColumns, hideLine, intervalEndColumn, name, opacity, overrides, show, showLabel, showMarkers, sourceType, style, timeColumn, titleColumn, value, width);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnnotationLayer {\n");
    
    sb.append("    annotationType: ").append(toIndentedString(annotationType)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    descriptionColumns: ").append(toIndentedString(descriptionColumns)).append("\n");
    sb.append("    hideLine: ").append(toIndentedString(hideLine)).append("\n");
    sb.append("    intervalEndColumn: ").append(toIndentedString(intervalEndColumn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    opacity: ").append(toIndentedString(opacity)).append("\n");
    sb.append("    overrides: ").append(toIndentedString(overrides)).append("\n");
    sb.append("    show: ").append(toIndentedString(show)).append("\n");
    sb.append("    showLabel: ").append(toIndentedString(showLabel)).append("\n");
    sb.append("    showMarkers: ").append(toIndentedString(showMarkers)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    style: ").append(toIndentedString(style)).append("\n");
    sb.append("    timeColumn: ").append(toIndentedString(timeColumn)).append("\n");
    sb.append("    titleColumn: ").append(toIndentedString(titleColumn)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
