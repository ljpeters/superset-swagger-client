/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * AdvancedDataTypeSchema
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-08-29T14:48:42.974+02:00[Europe/Berlin]")
public class AdvancedDataTypeSchema {
  @SerializedName("display_value")
  private String displayValue = null;

  @SerializedName("error_message")
  private String errorMessage = null;

  @SerializedName("valid_filter_operators")
  private List<String> validFilterOperators = null;

  @SerializedName("values")
  private List<String> values = null;

  public AdvancedDataTypeSchema displayValue(String displayValue) {
    this.displayValue = displayValue;
    return this;
  }

   /**
   * The string representation of the parsed values
   * @return displayValue
  **/
  @Schema(description = "The string representation of the parsed values")
  public String getDisplayValue() {
    return displayValue;
  }

  public void setDisplayValue(String displayValue) {
    this.displayValue = displayValue;
  }

  public AdvancedDataTypeSchema errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * Get errorMessage
   * @return errorMessage
  **/
  @Schema(description = "")
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }

  public AdvancedDataTypeSchema validFilterOperators(List<String> validFilterOperators) {
    this.validFilterOperators = validFilterOperators;
    return this;
  }

  public AdvancedDataTypeSchema addValidFilterOperatorsItem(String validFilterOperatorsItem) {
    if (this.validFilterOperators == null) {
      this.validFilterOperators = new ArrayList<String>();
    }
    this.validFilterOperators.add(validFilterOperatorsItem);
    return this;
  }

   /**
   * Get validFilterOperators
   * @return validFilterOperators
  **/
  @Schema(description = "")
  public List<String> getValidFilterOperators() {
    return validFilterOperators;
  }

  public void setValidFilterOperators(List<String> validFilterOperators) {
    this.validFilterOperators = validFilterOperators;
  }

  public AdvancedDataTypeSchema values(List<String> values) {
    this.values = values;
    return this;
  }

  public AdvancedDataTypeSchema addValuesItem(String valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<String>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Get values
   * @return values
  **/
  @Schema(description = "")
  public List<String> getValues() {
    return values;
  }

  public void setValues(List<String> values) {
    this.values = values;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdvancedDataTypeSchema advancedDataTypeSchema = (AdvancedDataTypeSchema) o;
    return Objects.equals(this.displayValue, advancedDataTypeSchema.displayValue) &&
        Objects.equals(this.errorMessage, advancedDataTypeSchema.errorMessage) &&
        Objects.equals(this.validFilterOperators, advancedDataTypeSchema.validFilterOperators) &&
        Objects.equals(this.values, advancedDataTypeSchema.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayValue, errorMessage, validFilterOperators, values);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdvancedDataTypeSchema {\n");
    
    sb.append("    displayValue: ").append(toIndentedString(displayValue)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    validFilterOperators: ").append(toIndentedString(validFilterOperators)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
