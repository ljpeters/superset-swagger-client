/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import at.mic.superset.swagger.client.model.Meta6;
import at.mic.superset.swagger.client.model.Meta7;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * DashboardRestApiGet
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-06T17:36:10.263+01:00[Europe/Vienna]")
public class DashboardRestApiGet {
  @SerializedName("changed_by")
  private Meta7 changedBy = null;

  @SerializedName("changed_by_name")
  private Object changedByName = null;

  @SerializedName("changed_by_url")
  private Object changedByUrl = null;

  @SerializedName("changed_on")
  private OffsetDateTime changedOn = null;

  @SerializedName("charts")
  private Object charts = null;

  @SerializedName("css")
  private String css = null;

  @SerializedName("dashboard_title")
  private String dashboardTitle = null;

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("json_metadata")
  private String jsonMetadata = null;

  @SerializedName("owners")
  private Meta6 owners = null;

  @SerializedName("position_json")
  private String positionJson = null;

  @SerializedName("published")
  private Boolean published = null;

  @SerializedName("slug")
  private String slug = null;

  @SerializedName("table_names")
  private Object tableNames = null;

  @SerializedName("thumbnail_url")
  private Object thumbnailUrl = null;

  @SerializedName("url")
  private Object url = null;

  public DashboardRestApiGet changedBy(Meta7 changedBy) {
    this.changedBy = changedBy;
    return this;
  }

   /**
   * Get changedBy
   * @return changedBy
  **/
  @Schema(description = "")
  public Meta7 getChangedBy() {
    return changedBy;
  }

  public void setChangedBy(Meta7 changedBy) {
    this.changedBy = changedBy;
  }

   /**
   * Get changedByName
   * @return changedByName
  **/
  @Schema(description = "")
  public Object getChangedByName() {
    return changedByName;
  }

   /**
   * Get changedByUrl
   * @return changedByUrl
  **/
  @Schema(description = "")
  public Object getChangedByUrl() {
    return changedByUrl;
  }

  public DashboardRestApiGet changedOn(OffsetDateTime changedOn) {
    this.changedOn = changedOn;
    return this;
  }

   /**
   * Get changedOn
   * @return changedOn
  **/
  @Schema(description = "")
  public OffsetDateTime getChangedOn() {
    return changedOn;
  }

  public void setChangedOn(OffsetDateTime changedOn) {
    this.changedOn = changedOn;
  }

   /**
   * Get charts
   * @return charts
  **/
  @Schema(description = "")
  public Object getCharts() {
    return charts;
  }

  public DashboardRestApiGet css(String css) {
    this.css = css;
    return this;
  }

   /**
   * Get css
   * @return css
  **/
  @Schema(description = "")
  public String getCss() {
    return css;
  }

  public void setCss(String css) {
    this.css = css;
  }

  public DashboardRestApiGet dashboardTitle(String dashboardTitle) {
    this.dashboardTitle = dashboardTitle;
    return this;
  }

   /**
   * Get dashboardTitle
   * @return dashboardTitle
  **/
  @Schema(description = "")
  public String getDashboardTitle() {
    return dashboardTitle;
  }

  public void setDashboardTitle(String dashboardTitle) {
    this.dashboardTitle = dashboardTitle;
  }

  public DashboardRestApiGet id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public DashboardRestApiGet jsonMetadata(String jsonMetadata) {
    this.jsonMetadata = jsonMetadata;
    return this;
  }

   /**
   * Get jsonMetadata
   * @return jsonMetadata
  **/
  @Schema(description = "")
  public String getJsonMetadata() {
    return jsonMetadata;
  }

  public void setJsonMetadata(String jsonMetadata) {
    this.jsonMetadata = jsonMetadata;
  }

  public DashboardRestApiGet owners(Meta6 owners) {
    this.owners = owners;
    return this;
  }

   /**
   * Get owners
   * @return owners
  **/
  @Schema(description = "")
  public Meta6 getOwners() {
    return owners;
  }

  public void setOwners(Meta6 owners) {
    this.owners = owners;
  }

  public DashboardRestApiGet positionJson(String positionJson) {
    this.positionJson = positionJson;
    return this;
  }

   /**
   * Get positionJson
   * @return positionJson
  **/
  @Schema(description = "")
  public String getPositionJson() {
    return positionJson;
  }

  public void setPositionJson(String positionJson) {
    this.positionJson = positionJson;
  }

  public DashboardRestApiGet published(Boolean published) {
    this.published = published;
    return this;
  }

   /**
   * Get published
   * @return published
  **/
  @Schema(description = "")
  public Boolean isPublished() {
    return published;
  }

  public void setPublished(Boolean published) {
    this.published = published;
  }

  public DashboardRestApiGet slug(String slug) {
    this.slug = slug;
    return this;
  }

   /**
   * Get slug
   * @return slug
  **/
  @Schema(description = "")
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }

   /**
   * Get tableNames
   * @return tableNames
  **/
  @Schema(description = "")
  public Object getTableNames() {
    return tableNames;
  }

   /**
   * Get thumbnailUrl
   * @return thumbnailUrl
  **/
  @Schema(description = "")
  public Object getThumbnailUrl() {
    return thumbnailUrl;
  }

   /**
   * Get url
   * @return url
  **/
  @Schema(description = "")
  public Object getUrl() {
    return url;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DashboardRestApiGet dashboardRestApiGet = (DashboardRestApiGet) o;
    return Objects.equals(this.changedBy, dashboardRestApiGet.changedBy) &&
        Objects.equals(this.changedByName, dashboardRestApiGet.changedByName) &&
        Objects.equals(this.changedByUrl, dashboardRestApiGet.changedByUrl) &&
        Objects.equals(this.changedOn, dashboardRestApiGet.changedOn) &&
        Objects.equals(this.charts, dashboardRestApiGet.charts) &&
        Objects.equals(this.css, dashboardRestApiGet.css) &&
        Objects.equals(this.dashboardTitle, dashboardRestApiGet.dashboardTitle) &&
        Objects.equals(this.id, dashboardRestApiGet.id) &&
        Objects.equals(this.jsonMetadata, dashboardRestApiGet.jsonMetadata) &&
        Objects.equals(this.owners, dashboardRestApiGet.owners) &&
        Objects.equals(this.positionJson, dashboardRestApiGet.positionJson) &&
        Objects.equals(this.published, dashboardRestApiGet.published) &&
        Objects.equals(this.slug, dashboardRestApiGet.slug) &&
        Objects.equals(this.tableNames, dashboardRestApiGet.tableNames) &&
        Objects.equals(this.thumbnailUrl, dashboardRestApiGet.thumbnailUrl) &&
        Objects.equals(this.url, dashboardRestApiGet.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changedBy, changedByName, changedByUrl, changedOn, charts, css, dashboardTitle, id, jsonMetadata, owners, positionJson, published, slug, tableNames, thumbnailUrl, url);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DashboardRestApiGet {\n");
    
    sb.append("    changedBy: ").append(toIndentedString(changedBy)).append("\n");
    sb.append("    changedByName: ").append(toIndentedString(changedByName)).append("\n");
    sb.append("    changedByUrl: ").append(toIndentedString(changedByUrl)).append("\n");
    sb.append("    changedOn: ").append(toIndentedString(changedOn)).append("\n");
    sb.append("    charts: ").append(toIndentedString(charts)).append("\n");
    sb.append("    css: ").append(toIndentedString(css)).append("\n");
    sb.append("    dashboardTitle: ").append(toIndentedString(dashboardTitle)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jsonMetadata: ").append(toIndentedString(jsonMetadata)).append("\n");
    sb.append("    owners: ").append(toIndentedString(owners)).append("\n");
    sb.append("    positionJson: ").append(toIndentedString(positionJson)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    tableNames: ").append(toIndentedString(tableNames)).append("\n");
    sb.append("    thumbnailUrl: ").append(toIndentedString(thumbnailUrl)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
