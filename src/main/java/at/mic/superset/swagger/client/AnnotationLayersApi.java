/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client;

import at.mic.superset.swagger.ApiCallback;
import at.mic.superset.swagger.ApiClient;
import at.mic.superset.swagger.ApiException;
import at.mic.superset.swagger.ApiResponse;
import at.mic.superset.swagger.Configuration;
import at.mic.superset.swagger.Pair;
import at.mic.superset.swagger.ProgressRequestBody;
import at.mic.superset.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import at.mic.superset.swagger.client.model.AnnotationLayerRestApiPost;
import at.mic.superset.swagger.client.model.AnnotationLayerRestApiPut;
import at.mic.superset.swagger.client.model.AnnotationRestApiPost;
import at.mic.superset.swagger.client.model.AnnotationRestApiPut;
import at.mic.superset.swagger.client.model.GetDeleteIdsSchema;
import at.mic.superset.swagger.client.model.GetInfoSchema;
import at.mic.superset.swagger.client.model.GetItemSchema;
import at.mic.superset.swagger.client.model.GetListSchema;
import at.mic.superset.swagger.client.model.GetRelatedSchema;
import at.mic.superset.swagger.client.model.InlineResponse2001;
import at.mic.superset.swagger.client.model.InlineResponse2002;
import at.mic.superset.swagger.client.model.InlineResponse2003;
import at.mic.superset.swagger.client.model.InlineResponse2004;
import at.mic.superset.swagger.client.model.InlineResponse2005;
import at.mic.superset.swagger.client.model.InlineResponse2006;
import at.mic.superset.swagger.client.model.InlineResponse2007;
import at.mic.superset.swagger.client.model.InlineResponse201;
import at.mic.superset.swagger.client.model.InlineResponse2011;
import at.mic.superset.swagger.client.model.InlineResponse400;
import at.mic.superset.swagger.client.model.RelatedResponseSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnnotationLayersApi {
    private ApiClient apiClient;

    public AnnotationLayersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnnotationLayersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiV1AnnotationLayerDelete
     * @param q  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerDeleteCall(GetDeleteIdsSchema q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/annotation_layer/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AnnotationLayerDeleteValidateBeforeCall(GetDeleteIdsSchema q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = apiV1AnnotationLayerDeleteCall(q, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Deletes multiple annotation layers in a bulk operation.
     * @param q  (optional)
     * @return InlineResponse400
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse400 apiV1AnnotationLayerDelete(GetDeleteIdsSchema q) throws ApiException {
        ApiResponse<InlineResponse400> resp = apiV1AnnotationLayerDeleteWithHttpInfo(q);
        return resp.getData();
    }

    /**
     * 
     * Deletes multiple annotation layers in a bulk operation.
     * @param q  (optional)
     * @return ApiResponse&lt;InlineResponse400&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse400> apiV1AnnotationLayerDeleteWithHttpInfo(GetDeleteIdsSchema q) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AnnotationLayerDeleteValidateBeforeCall(q, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse400>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes multiple annotation layers in a bulk operation.
     * @param q  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerDeleteAsync(GetDeleteIdsSchema q, final ApiCallback<InlineResponse400> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AnnotationLayerDeleteValidateBeforeCall(q, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse400>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AnnotationLayerGet
     * @param q  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerGetCall(GetListSchema q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/annotation_layer/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AnnotationLayerGetValidateBeforeCall(GetListSchema q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = apiV1AnnotationLayerGetCall(q, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param q  (optional)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 apiV1AnnotationLayerGet(GetListSchema q) throws ApiException {
        ApiResponse<InlineResponse2001> resp = apiV1AnnotationLayerGetWithHttpInfo(q);
        return resp.getData();
    }

    /**
     * 
     * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param q  (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> apiV1AnnotationLayerGetWithHttpInfo(GetListSchema q) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AnnotationLayerGetValidateBeforeCall(q, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param q  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerGetAsync(GetListSchema q, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AnnotationLayerGetValidateBeforeCall(q, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AnnotationLayerInfoGet
     * @param q  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerInfoGetCall(GetInfoSchema q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/annotation_layer/_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AnnotationLayerInfoGetValidateBeforeCall(GetInfoSchema q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = apiV1AnnotationLayerInfoGetCall(q, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get metadata information about this API resource
     * @param q  (optional)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 apiV1AnnotationLayerInfoGet(GetInfoSchema q) throws ApiException {
        ApiResponse<InlineResponse2002> resp = apiV1AnnotationLayerInfoGetWithHttpInfo(q);
        return resp.getData();
    }

    /**
     * 
     * Get metadata information about this API resource
     * @param q  (optional)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> apiV1AnnotationLayerInfoGetWithHttpInfo(GetInfoSchema q) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AnnotationLayerInfoGetValidateBeforeCall(q, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get metadata information about this API resource
     * @param q  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerInfoGetAsync(GetInfoSchema q, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AnnotationLayerInfoGetValidateBeforeCall(q, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AnnotationLayerPkAnnotationAnnotationIdDelete
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationId The annotation pk for this annotation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerPkAnnotationAnnotationIdDeleteCall(Integer pk, Integer annotationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/annotation_layer/{pk}/annotation/{annotation_id}"
            .replaceAll("\\{" + "pk" + "\\}", apiClient.escapeString(pk.toString()))
            .replaceAll("\\{" + "annotation_id" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AnnotationLayerPkAnnotationAnnotationIdDeleteValidateBeforeCall(Integer pk, Integer annotationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling apiV1AnnotationLayerPkAnnotationAnnotationIdDelete(Async)");
        }
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling apiV1AnnotationLayerPkAnnotationAnnotationIdDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkAnnotationAnnotationIdDeleteCall(pk, annotationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationId The annotation pk for this annotation (required)
     * @return InlineResponse400
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse400 apiV1AnnotationLayerPkAnnotationAnnotationIdDelete(Integer pk, Integer annotationId) throws ApiException {
        ApiResponse<InlineResponse400> resp = apiV1AnnotationLayerPkAnnotationAnnotationIdDeleteWithHttpInfo(pk, annotationId);
        return resp.getData();
    }

    /**
     * 
     * Delete Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationId The annotation pk for this annotation (required)
     * @return ApiResponse&lt;InlineResponse400&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse400> apiV1AnnotationLayerPkAnnotationAnnotationIdDeleteWithHttpInfo(Integer pk, Integer annotationId) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkAnnotationAnnotationIdDeleteValidateBeforeCall(pk, annotationId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse400>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationId The annotation pk for this annotation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerPkAnnotationAnnotationIdDeleteAsync(Integer pk, Integer annotationId, final ApiCallback<InlineResponse400> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkAnnotationAnnotationIdDeleteValidateBeforeCall(pk, annotationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse400>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AnnotationLayerPkAnnotationAnnotationIdGet
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationId The annotation pk (required)
     * @param q  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerPkAnnotationAnnotationIdGetCall(Integer pk, Integer annotationId, GetItemSchema q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/annotation_layer/{pk}/annotation/{annotation_id}"
            .replaceAll("\\{" + "pk" + "\\}", apiClient.escapeString(pk.toString()))
            .replaceAll("\\{" + "annotation_id" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AnnotationLayerPkAnnotationAnnotationIdGetValidateBeforeCall(Integer pk, Integer annotationId, GetItemSchema q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling apiV1AnnotationLayerPkAnnotationAnnotationIdGet(Async)");
        }
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling apiV1AnnotationLayerPkAnnotationAnnotationIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkAnnotationAnnotationIdGetCall(pk, annotationId, q, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get an Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationId The annotation pk (required)
     * @param q  (optional)
     * @return InlineResponse2006
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2006 apiV1AnnotationLayerPkAnnotationAnnotationIdGet(Integer pk, Integer annotationId, GetItemSchema q) throws ApiException {
        ApiResponse<InlineResponse2006> resp = apiV1AnnotationLayerPkAnnotationAnnotationIdGetWithHttpInfo(pk, annotationId, q);
        return resp.getData();
    }

    /**
     * 
     * Get an Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationId The annotation pk (required)
     * @param q  (optional)
     * @return ApiResponse&lt;InlineResponse2006&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2006> apiV1AnnotationLayerPkAnnotationAnnotationIdGetWithHttpInfo(Integer pk, Integer annotationId, GetItemSchema q) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkAnnotationAnnotationIdGetValidateBeforeCall(pk, annotationId, q, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get an Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationId The annotation pk (required)
     * @param q  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerPkAnnotationAnnotationIdGetAsync(Integer pk, Integer annotationId, GetItemSchema q, final ApiCallback<InlineResponse2006> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkAnnotationAnnotationIdGetValidateBeforeCall(pk, annotationId, q, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AnnotationLayerPkAnnotationAnnotationIdPut
     * @param body Annotation schema (required)
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationId The annotation pk for this annotation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerPkAnnotationAnnotationIdPutCall(AnnotationRestApiPut body, Integer pk, Integer annotationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/annotation_layer/{pk}/annotation/{annotation_id}"
            .replaceAll("\\{" + "pk" + "\\}", apiClient.escapeString(pk.toString()))
            .replaceAll("\\{" + "annotation_id" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AnnotationLayerPkAnnotationAnnotationIdPutValidateBeforeCall(AnnotationRestApiPut body, Integer pk, Integer annotationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiV1AnnotationLayerPkAnnotationAnnotationIdPut(Async)");
        }
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling apiV1AnnotationLayerPkAnnotationAnnotationIdPut(Async)");
        }
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling apiV1AnnotationLayerPkAnnotationAnnotationIdPut(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkAnnotationAnnotationIdPutCall(body, pk, annotationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update an Annotation layer
     * @param body Annotation schema (required)
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationId The annotation pk for this annotation (required)
     * @return InlineResponse2007
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2007 apiV1AnnotationLayerPkAnnotationAnnotationIdPut(AnnotationRestApiPut body, Integer pk, Integer annotationId) throws ApiException {
        ApiResponse<InlineResponse2007> resp = apiV1AnnotationLayerPkAnnotationAnnotationIdPutWithHttpInfo(body, pk, annotationId);
        return resp.getData();
    }

    /**
     * 
     * Update an Annotation layer
     * @param body Annotation schema (required)
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationId The annotation pk for this annotation (required)
     * @return ApiResponse&lt;InlineResponse2007&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2007> apiV1AnnotationLayerPkAnnotationAnnotationIdPutWithHttpInfo(AnnotationRestApiPut body, Integer pk, Integer annotationId) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkAnnotationAnnotationIdPutValidateBeforeCall(body, pk, annotationId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2007>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an Annotation layer
     * @param body Annotation schema (required)
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationId The annotation pk for this annotation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerPkAnnotationAnnotationIdPutAsync(AnnotationRestApiPut body, Integer pk, Integer annotationId, final ApiCallback<InlineResponse2007> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkAnnotationAnnotationIdPutValidateBeforeCall(body, pk, annotationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2007>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AnnotationLayerPkAnnotationDelete
     * @param pk The annotation layer pk for this annotation (required)
     * @param q  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerPkAnnotationDeleteCall(Integer pk, GetDeleteIdsSchema q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/annotation_layer/{pk}/annotation/"
            .replaceAll("\\{" + "pk" + "\\}", apiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AnnotationLayerPkAnnotationDeleteValidateBeforeCall(Integer pk, GetDeleteIdsSchema q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling apiV1AnnotationLayerPkAnnotationDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkAnnotationDeleteCall(pk, q, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Deletes multiple annotation in a bulk operation.
     * @param pk The annotation layer pk for this annotation (required)
     * @param q  (optional)
     * @return InlineResponse400
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse400 apiV1AnnotationLayerPkAnnotationDelete(Integer pk, GetDeleteIdsSchema q) throws ApiException {
        ApiResponse<InlineResponse400> resp = apiV1AnnotationLayerPkAnnotationDeleteWithHttpInfo(pk, q);
        return resp.getData();
    }

    /**
     * 
     * Deletes multiple annotation in a bulk operation.
     * @param pk The annotation layer pk for this annotation (required)
     * @param q  (optional)
     * @return ApiResponse&lt;InlineResponse400&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse400> apiV1AnnotationLayerPkAnnotationDeleteWithHttpInfo(Integer pk, GetDeleteIdsSchema q) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkAnnotationDeleteValidateBeforeCall(pk, q, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse400>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes multiple annotation in a bulk operation.
     * @param pk The annotation layer pk for this annotation (required)
     * @param q  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerPkAnnotationDeleteAsync(Integer pk, GetDeleteIdsSchema q, final ApiCallback<InlineResponse400> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkAnnotationDeleteValidateBeforeCall(pk, q, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse400>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AnnotationLayerPkAnnotationGet
     * @param pk The annotation layer id for this annotation (required)
     * @param q  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerPkAnnotationGetCall(Integer pk, GetListSchema q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/annotation_layer/{pk}/annotation/"
            .replaceAll("\\{" + "pk" + "\\}", apiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AnnotationLayerPkAnnotationGetValidateBeforeCall(Integer pk, GetListSchema q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling apiV1AnnotationLayerPkAnnotationGet(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkAnnotationGetCall(pk, q, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param pk The annotation layer id for this annotation (required)
     * @param q  (optional)
     * @return InlineResponse2005
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2005 apiV1AnnotationLayerPkAnnotationGet(Integer pk, GetListSchema q) throws ApiException {
        ApiResponse<InlineResponse2005> resp = apiV1AnnotationLayerPkAnnotationGetWithHttpInfo(pk, q);
        return resp.getData();
    }

    /**
     * 
     * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param pk The annotation layer id for this annotation (required)
     * @param q  (optional)
     * @return ApiResponse&lt;InlineResponse2005&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2005> apiV1AnnotationLayerPkAnnotationGetWithHttpInfo(Integer pk, GetListSchema q) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkAnnotationGetValidateBeforeCall(pk, q, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param pk The annotation layer id for this annotation (required)
     * @param q  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerPkAnnotationGetAsync(Integer pk, GetListSchema q, final ApiCallback<InlineResponse2005> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkAnnotationGetValidateBeforeCall(pk, q, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AnnotationLayerPkAnnotationPost
     * @param body Annotation schema (required)
     * @param pk The annotation layer pk for this annotation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerPkAnnotationPostCall(AnnotationRestApiPost body, Integer pk, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/annotation_layer/{pk}/annotation/"
            .replaceAll("\\{" + "pk" + "\\}", apiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AnnotationLayerPkAnnotationPostValidateBeforeCall(AnnotationRestApiPost body, Integer pk, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiV1AnnotationLayerPkAnnotationPost(Async)");
        }
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling apiV1AnnotationLayerPkAnnotationPost(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkAnnotationPostCall(body, pk, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create an Annotation layer
     * @param body Annotation schema (required)
     * @param pk The annotation layer pk for this annotation (required)
     * @return InlineResponse2011
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2011 apiV1AnnotationLayerPkAnnotationPost(AnnotationRestApiPost body, Integer pk) throws ApiException {
        ApiResponse<InlineResponse2011> resp = apiV1AnnotationLayerPkAnnotationPostWithHttpInfo(body, pk);
        return resp.getData();
    }

    /**
     * 
     * Create an Annotation layer
     * @param body Annotation schema (required)
     * @param pk The annotation layer pk for this annotation (required)
     * @return ApiResponse&lt;InlineResponse2011&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2011> apiV1AnnotationLayerPkAnnotationPostWithHttpInfo(AnnotationRestApiPost body, Integer pk) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkAnnotationPostValidateBeforeCall(body, pk, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2011>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create an Annotation layer
     * @param body Annotation schema (required)
     * @param pk The annotation layer pk for this annotation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerPkAnnotationPostAsync(AnnotationRestApiPost body, Integer pk, final ApiCallback<InlineResponse2011> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkAnnotationPostValidateBeforeCall(body, pk, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2011>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AnnotationLayerPkDelete
     * @param pk The annotation layer pk for this annotation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerPkDeleteCall(Integer pk, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/annotation_layer/{pk}"
            .replaceAll("\\{" + "pk" + "\\}", apiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AnnotationLayerPkDeleteValidateBeforeCall(Integer pk, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling apiV1AnnotationLayerPkDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkDeleteCall(pk, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @return InlineResponse400
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse400 apiV1AnnotationLayerPkDelete(Integer pk) throws ApiException {
        ApiResponse<InlineResponse400> resp = apiV1AnnotationLayerPkDeleteWithHttpInfo(pk);
        return resp.getData();
    }

    /**
     * 
     * Delete Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @return ApiResponse&lt;InlineResponse400&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse400> apiV1AnnotationLayerPkDeleteWithHttpInfo(Integer pk) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkDeleteValidateBeforeCall(pk, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse400>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerPkDeleteAsync(Integer pk, final ApiCallback<InlineResponse400> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkDeleteValidateBeforeCall(pk, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse400>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AnnotationLayerPkGet
     * @param pk  (required)
     * @param q  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerPkGetCall(Integer pk, GetItemSchema q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/annotation_layer/{pk}"
            .replaceAll("\\{" + "pk" + "\\}", apiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AnnotationLayerPkGetValidateBeforeCall(Integer pk, GetItemSchema q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling apiV1AnnotationLayerPkGet(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkGetCall(pk, q, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get an Annotation layer
     * @param pk  (required)
     * @param q  (optional)
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2003 apiV1AnnotationLayerPkGet(Integer pk, GetItemSchema q) throws ApiException {
        ApiResponse<InlineResponse2003> resp = apiV1AnnotationLayerPkGetWithHttpInfo(pk, q);
        return resp.getData();
    }

    /**
     * 
     * Get an Annotation layer
     * @param pk  (required)
     * @param q  (optional)
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2003> apiV1AnnotationLayerPkGetWithHttpInfo(Integer pk, GetItemSchema q) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkGetValidateBeforeCall(pk, q, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get an Annotation layer
     * @param pk  (required)
     * @param q  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerPkGetAsync(Integer pk, GetItemSchema q, final ApiCallback<InlineResponse2003> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkGetValidateBeforeCall(pk, q, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AnnotationLayerPkPut
     * @param body Annotation schema (required)
     * @param pk The annotation layer pk for this annotation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerPkPutCall(AnnotationLayerRestApiPut body, Integer pk, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/annotation_layer/{pk}"
            .replaceAll("\\{" + "pk" + "\\}", apiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AnnotationLayerPkPutValidateBeforeCall(AnnotationLayerRestApiPut body, Integer pk, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiV1AnnotationLayerPkPut(Async)");
        }
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling apiV1AnnotationLayerPkPut(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkPutCall(body, pk, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update an Annotation layer
     * @param body Annotation schema (required)
     * @param pk The annotation layer pk for this annotation (required)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2004 apiV1AnnotationLayerPkPut(AnnotationLayerRestApiPut body, Integer pk) throws ApiException {
        ApiResponse<InlineResponse2004> resp = apiV1AnnotationLayerPkPutWithHttpInfo(body, pk);
        return resp.getData();
    }

    /**
     * 
     * Update an Annotation layer
     * @param body Annotation schema (required)
     * @param pk The annotation layer pk for this annotation (required)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2004> apiV1AnnotationLayerPkPutWithHttpInfo(AnnotationLayerRestApiPut body, Integer pk) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkPutValidateBeforeCall(body, pk, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an Annotation layer
     * @param body Annotation schema (required)
     * @param pk The annotation layer pk for this annotation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerPkPutAsync(AnnotationLayerRestApiPut body, Integer pk, final ApiCallback<InlineResponse2004> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AnnotationLayerPkPutValidateBeforeCall(body, pk, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AnnotationLayerPost
     * @param body Annotation Layer schema (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerPostCall(AnnotationLayerRestApiPost body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/annotation_layer/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AnnotationLayerPostValidateBeforeCall(AnnotationLayerRestApiPost body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiV1AnnotationLayerPost(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1AnnotationLayerPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create an Annotation layer
     * @param body Annotation Layer schema (required)
     * @return InlineResponse201
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse201 apiV1AnnotationLayerPost(AnnotationLayerRestApiPost body) throws ApiException {
        ApiResponse<InlineResponse201> resp = apiV1AnnotationLayerPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Create an Annotation layer
     * @param body Annotation Layer schema (required)
     * @return ApiResponse&lt;InlineResponse201&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse201> apiV1AnnotationLayerPostWithHttpInfo(AnnotationLayerRestApiPost body) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AnnotationLayerPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse201>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create an Annotation layer
     * @param body Annotation Layer schema (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerPostAsync(AnnotationLayerRestApiPost body, final ApiCallback<InlineResponse201> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AnnotationLayerPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse201>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AnnotationLayerRelatedColumnNameGet
     * @param columnName  (required)
     * @param q  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerRelatedColumnNameGetCall(String columnName, GetRelatedSchema q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/annotation_layer/related/{column_name}"
            .replaceAll("\\{" + "column_name" + "\\}", apiClient.escapeString(columnName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AnnotationLayerRelatedColumnNameGetValidateBeforeCall(String columnName, GetRelatedSchema q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'columnName' is set
        if (columnName == null) {
            throw new ApiException("Missing the required parameter 'columnName' when calling apiV1AnnotationLayerRelatedColumnNameGet(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1AnnotationLayerRelatedColumnNameGetCall(columnName, q, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param columnName  (required)
     * @param q  (optional)
     * @return RelatedResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RelatedResponseSchema apiV1AnnotationLayerRelatedColumnNameGet(String columnName, GetRelatedSchema q) throws ApiException {
        ApiResponse<RelatedResponseSchema> resp = apiV1AnnotationLayerRelatedColumnNameGetWithHttpInfo(columnName, q);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param columnName  (required)
     * @param q  (optional)
     * @return ApiResponse&lt;RelatedResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RelatedResponseSchema> apiV1AnnotationLayerRelatedColumnNameGetWithHttpInfo(String columnName, GetRelatedSchema q) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AnnotationLayerRelatedColumnNameGetValidateBeforeCall(columnName, q, null, null);
        Type localVarReturnType = new TypeToken<RelatedResponseSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param columnName  (required)
     * @param q  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AnnotationLayerRelatedColumnNameGetAsync(String columnName, GetRelatedSchema q, final ApiCallback<RelatedResponseSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AnnotationLayerRelatedColumnNameGetValidateBeforeCall(columnName, q, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RelatedResponseSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
