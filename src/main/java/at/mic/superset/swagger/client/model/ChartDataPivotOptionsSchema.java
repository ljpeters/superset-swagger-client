/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
/**
 * ChartDataPivotOptionsSchema
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-06T17:36:10.263+01:00[Europe/Vienna]")
public class ChartDataPivotOptionsSchema {
  @SerializedName("aggregates")
  private Object aggregates = null;

  @SerializedName("column_fill_value")
  private String columnFillValue = null;

  @SerializedName("columns")
  private List<String> columns = null;

  @SerializedName("drop_missing_columns")
  private Boolean dropMissingColumns = null;

  @SerializedName("marginal_distribution_name")
  private String marginalDistributionName = null;

  @SerializedName("marginal_distributions")
  private Boolean marginalDistributions = null;

  @SerializedName("metric_fill_value")
  private BigDecimal metricFillValue = null;

  public ChartDataPivotOptionsSchema aggregates(Object aggregates) {
    this.aggregates = aggregates;
    return this;
  }

   /**
   * The keys are the name of the aggregate column to be created, and the values specify the details of how to apply the aggregation. If an operator requires additional options, these can be passed here to be unpacked in the operator call. The following numpy operators are supported: average, argmin, argmax, cumsum, cumprod, max, mean, median, nansum, nanmin, nanmax, nanmean, nanmedian, min, percentile, prod, product, std, sum, var. Any options required by the operator can be passed to the &#x60;options&#x60; object.  In the example, a new column &#x60;first_quantile&#x60; is created based on values in the column &#x60;my_col&#x60; using the &#x60;percentile&#x60; operator with the &#x60;q&#x3D;0.25&#x60; parameter.
   * @return aggregates
  **/
  @Schema(example = "{\"first_quantile\":{\"column\":\"my_col\",\"operator\":\"percentile\",\"options\":{\"q\":0.25}}}", description = "The keys are the name of the aggregate column to be created, and the values specify the details of how to apply the aggregation. If an operator requires additional options, these can be passed here to be unpacked in the operator call. The following numpy operators are supported: average, argmin, argmax, cumsum, cumprod, max, mean, median, nansum, nanmin, nanmax, nanmean, nanmedian, min, percentile, prod, product, std, sum, var. Any options required by the operator can be passed to the `options` object.  In the example, a new column `first_quantile` is created based on values in the column `my_col` using the `percentile` operator with the `q=0.25` parameter.")
  public Object getAggregates() {
    return aggregates;
  }

  public void setAggregates(Object aggregates) {
    this.aggregates = aggregates;
  }

  public ChartDataPivotOptionsSchema columnFillValue(String columnFillValue) {
    this.columnFillValue = columnFillValue;
    return this;
  }

   /**
   * Value to replace missing pivot columns names with.
   * @return columnFillValue
  **/
  @Schema(description = "Value to replace missing pivot columns names with.")
  public String getColumnFillValue() {
    return columnFillValue;
  }

  public void setColumnFillValue(String columnFillValue) {
    this.columnFillValue = columnFillValue;
  }

  public ChartDataPivotOptionsSchema columns(List<String> columns) {
    this.columns = columns;
    return this;
  }

  public ChartDataPivotOptionsSchema addColumnsItem(String columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<String>();
    }
    this.columns.add(columnsItem);
    return this;
  }

   /**
   * Get columns
   * @return columns
  **/
  @Schema(description = "")
  public List<String> getColumns() {
    return columns;
  }

  public void setColumns(List<String> columns) {
    this.columns = columns;
  }

  public ChartDataPivotOptionsSchema dropMissingColumns(Boolean dropMissingColumns) {
    this.dropMissingColumns = dropMissingColumns;
    return this;
  }

   /**
   * Do not include columns whose entries are all missing (default: &#x60;true&#x60;).
   * @return dropMissingColumns
  **/
  @Schema(description = "Do not include columns whose entries are all missing (default: `true`).")
  public Boolean isDropMissingColumns() {
    return dropMissingColumns;
  }

  public void setDropMissingColumns(Boolean dropMissingColumns) {
    this.dropMissingColumns = dropMissingColumns;
  }

  public ChartDataPivotOptionsSchema marginalDistributionName(String marginalDistributionName) {
    this.marginalDistributionName = marginalDistributionName;
    return this;
  }

   /**
   * Name of marginal distribution row/column. (default: &#x60;All&#x60;)
   * @return marginalDistributionName
  **/
  @Schema(description = "Name of marginal distribution row/column. (default: `All`)")
  public String getMarginalDistributionName() {
    return marginalDistributionName;
  }

  public void setMarginalDistributionName(String marginalDistributionName) {
    this.marginalDistributionName = marginalDistributionName;
  }

  public ChartDataPivotOptionsSchema marginalDistributions(Boolean marginalDistributions) {
    this.marginalDistributions = marginalDistributions;
    return this;
  }

   /**
   * Add totals for row/column. (default: &#x60;false&#x60;)
   * @return marginalDistributions
  **/
  @Schema(description = "Add totals for row/column. (default: `false`)")
  public Boolean isMarginalDistributions() {
    return marginalDistributions;
  }

  public void setMarginalDistributions(Boolean marginalDistributions) {
    this.marginalDistributions = marginalDistributions;
  }

  public ChartDataPivotOptionsSchema metricFillValue(BigDecimal metricFillValue) {
    this.metricFillValue = metricFillValue;
    return this;
  }

   /**
   * Value to replace missing values with in aggregate calculations.
   * @return metricFillValue
  **/
  @Schema(description = "Value to replace missing values with in aggregate calculations.")
  public BigDecimal getMetricFillValue() {
    return metricFillValue;
  }

  public void setMetricFillValue(BigDecimal metricFillValue) {
    this.metricFillValue = metricFillValue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartDataPivotOptionsSchema chartDataPivotOptionsSchema = (ChartDataPivotOptionsSchema) o;
    return Objects.equals(this.aggregates, chartDataPivotOptionsSchema.aggregates) &&
        Objects.equals(this.columnFillValue, chartDataPivotOptionsSchema.columnFillValue) &&
        Objects.equals(this.columns, chartDataPivotOptionsSchema.columns) &&
        Objects.equals(this.dropMissingColumns, chartDataPivotOptionsSchema.dropMissingColumns) &&
        Objects.equals(this.marginalDistributionName, chartDataPivotOptionsSchema.marginalDistributionName) &&
        Objects.equals(this.marginalDistributions, chartDataPivotOptionsSchema.marginalDistributions) &&
        Objects.equals(this.metricFillValue, chartDataPivotOptionsSchema.metricFillValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregates, columnFillValue, columns, dropMissingColumns, marginalDistributionName, marginalDistributions, metricFillValue);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartDataPivotOptionsSchema {\n");
    
    sb.append("    aggregates: ").append(toIndentedString(aggregates)).append("\n");
    sb.append("    columnFillValue: ").append(toIndentedString(columnFillValue)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    dropMissingColumns: ").append(toIndentedString(dropMissingColumns)).append("\n");
    sb.append("    marginalDistributionName: ").append(toIndentedString(marginalDistributionName)).append("\n");
    sb.append("    marginalDistributions: ").append(toIndentedString(marginalDistributions)).append("\n");
    sb.append("    metricFillValue: ").append(toIndentedString(metricFillValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
