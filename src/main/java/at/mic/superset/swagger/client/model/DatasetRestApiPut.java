/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import at.mic.superset.swagger.client.model.DatasetColumnsPut;
import at.mic.superset.swagger.client.model.DatasetMetricsPut;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * DatasetRestApiPut
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-08-29T14:48:42.974+02:00[Europe/Berlin]")
public class DatasetRestApiPut {
  @SerializedName("cache_timeout")
  private Integer cacheTimeout = null;

  @SerializedName("columns")
  private List<DatasetColumnsPut> columns = null;

  @SerializedName("database_id")
  private Integer databaseId = null;

  @SerializedName("default_endpoint")
  private String defaultEndpoint = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("external_url")
  private String externalUrl = null;

  @SerializedName("extra")
  private String extra = null;

  @SerializedName("fetch_values_predicate")
  private String fetchValuesPredicate = null;

  @SerializedName("filter_select_enabled")
  private Boolean filterSelectEnabled = null;

  @SerializedName("is_managed_externally")
  private Boolean isManagedExternally = null;

  @SerializedName("is_sqllab_view")
  private Boolean isSqllabView = null;

  @SerializedName("main_dttm_col")
  private String mainDttmCol = null;

  @SerializedName("metrics")
  private List<DatasetMetricsPut> metrics = null;

  @SerializedName("offset")
  private Integer offset = null;

  @SerializedName("owners")
  private List<Integer> owners = null;

  @SerializedName("schema")
  private String schema = null;

  @SerializedName("sql")
  private String sql = null;

  @SerializedName("table_name")
  private String tableName = null;

  @SerializedName("template_params")
  private String templateParams = null;

  public DatasetRestApiPut cacheTimeout(Integer cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
    return this;
  }

   /**
   * Get cacheTimeout
   * @return cacheTimeout
  **/
  @Schema(description = "")
  public Integer getCacheTimeout() {
    return cacheTimeout;
  }

  public void setCacheTimeout(Integer cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
  }

  public DatasetRestApiPut columns(List<DatasetColumnsPut> columns) {
    this.columns = columns;
    return this;
  }

  public DatasetRestApiPut addColumnsItem(DatasetColumnsPut columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<DatasetColumnsPut>();
    }
    this.columns.add(columnsItem);
    return this;
  }

   /**
   * Get columns
   * @return columns
  **/
  @Schema(description = "")
  public List<DatasetColumnsPut> getColumns() {
    return columns;
  }

  public void setColumns(List<DatasetColumnsPut> columns) {
    this.columns = columns;
  }

  public DatasetRestApiPut databaseId(Integer databaseId) {
    this.databaseId = databaseId;
    return this;
  }

   /**
   * Get databaseId
   * @return databaseId
  **/
  @Schema(description = "")
  public Integer getDatabaseId() {
    return databaseId;
  }

  public void setDatabaseId(Integer databaseId) {
    this.databaseId = databaseId;
  }

  public DatasetRestApiPut defaultEndpoint(String defaultEndpoint) {
    this.defaultEndpoint = defaultEndpoint;
    return this;
  }

   /**
   * Get defaultEndpoint
   * @return defaultEndpoint
  **/
  @Schema(description = "")
  public String getDefaultEndpoint() {
    return defaultEndpoint;
  }

  public void setDefaultEndpoint(String defaultEndpoint) {
    this.defaultEndpoint = defaultEndpoint;
  }

  public DatasetRestApiPut description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public DatasetRestApiPut externalUrl(String externalUrl) {
    this.externalUrl = externalUrl;
    return this;
  }

   /**
   * Get externalUrl
   * @return externalUrl
  **/
  @Schema(description = "")
  public String getExternalUrl() {
    return externalUrl;
  }

  public void setExternalUrl(String externalUrl) {
    this.externalUrl = externalUrl;
  }

  public DatasetRestApiPut extra(String extra) {
    this.extra = extra;
    return this;
  }

   /**
   * Get extra
   * @return extra
  **/
  @Schema(description = "")
  public String getExtra() {
    return extra;
  }

  public void setExtra(String extra) {
    this.extra = extra;
  }

  public DatasetRestApiPut fetchValuesPredicate(String fetchValuesPredicate) {
    this.fetchValuesPredicate = fetchValuesPredicate;
    return this;
  }

   /**
   * Get fetchValuesPredicate
   * @return fetchValuesPredicate
  **/
  @Schema(description = "")
  public String getFetchValuesPredicate() {
    return fetchValuesPredicate;
  }

  public void setFetchValuesPredicate(String fetchValuesPredicate) {
    this.fetchValuesPredicate = fetchValuesPredicate;
  }

  public DatasetRestApiPut filterSelectEnabled(Boolean filterSelectEnabled) {
    this.filterSelectEnabled = filterSelectEnabled;
    return this;
  }

   /**
   * Get filterSelectEnabled
   * @return filterSelectEnabled
  **/
  @Schema(description = "")
  public Boolean isFilterSelectEnabled() {
    return filterSelectEnabled;
  }

  public void setFilterSelectEnabled(Boolean filterSelectEnabled) {
    this.filterSelectEnabled = filterSelectEnabled;
  }

  public DatasetRestApiPut isManagedExternally(Boolean isManagedExternally) {
    this.isManagedExternally = isManagedExternally;
    return this;
  }

   /**
   * Get isManagedExternally
   * @return isManagedExternally
  **/
  @Schema(description = "")
  public Boolean isIsManagedExternally() {
    return isManagedExternally;
  }

  public void setIsManagedExternally(Boolean isManagedExternally) {
    this.isManagedExternally = isManagedExternally;
  }

  public DatasetRestApiPut isSqllabView(Boolean isSqllabView) {
    this.isSqllabView = isSqllabView;
    return this;
  }

   /**
   * Get isSqllabView
   * @return isSqllabView
  **/
  @Schema(description = "")
  public Boolean isIsSqllabView() {
    return isSqllabView;
  }

  public void setIsSqllabView(Boolean isSqllabView) {
    this.isSqllabView = isSqllabView;
  }

  public DatasetRestApiPut mainDttmCol(String mainDttmCol) {
    this.mainDttmCol = mainDttmCol;
    return this;
  }

   /**
   * Get mainDttmCol
   * @return mainDttmCol
  **/
  @Schema(description = "")
  public String getMainDttmCol() {
    return mainDttmCol;
  }

  public void setMainDttmCol(String mainDttmCol) {
    this.mainDttmCol = mainDttmCol;
  }

  public DatasetRestApiPut metrics(List<DatasetMetricsPut> metrics) {
    this.metrics = metrics;
    return this;
  }

  public DatasetRestApiPut addMetricsItem(DatasetMetricsPut metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<DatasetMetricsPut>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

   /**
   * Get metrics
   * @return metrics
  **/
  @Schema(description = "")
  public List<DatasetMetricsPut> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<DatasetMetricsPut> metrics) {
    this.metrics = metrics;
  }

  public DatasetRestApiPut offset(Integer offset) {
    this.offset = offset;
    return this;
  }

   /**
   * Get offset
   * @return offset
  **/
  @Schema(description = "")
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }

  public DatasetRestApiPut owners(List<Integer> owners) {
    this.owners = owners;
    return this;
  }

  public DatasetRestApiPut addOwnersItem(Integer ownersItem) {
    if (this.owners == null) {
      this.owners = new ArrayList<Integer>();
    }
    this.owners.add(ownersItem);
    return this;
  }

   /**
   * Get owners
   * @return owners
  **/
  @Schema(description = "")
  public List<Integer> getOwners() {
    return owners;
  }

  public void setOwners(List<Integer> owners) {
    this.owners = owners;
  }

  public DatasetRestApiPut schema(String schema) {
    this.schema = schema;
    return this;
  }

   /**
   * Get schema
   * @return schema
  **/
  @Schema(description = "")
  public String getSchema() {
    return schema;
  }

  public void setSchema(String schema) {
    this.schema = schema;
  }

  public DatasetRestApiPut sql(String sql) {
    this.sql = sql;
    return this;
  }

   /**
   * Get sql
   * @return sql
  **/
  @Schema(description = "")
  public String getSql() {
    return sql;
  }

  public void setSql(String sql) {
    this.sql = sql;
  }

  public DatasetRestApiPut tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

   /**
   * Get tableName
   * @return tableName
  **/
  @Schema(description = "")
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }

  public DatasetRestApiPut templateParams(String templateParams) {
    this.templateParams = templateParams;
    return this;
  }

   /**
   * Get templateParams
   * @return templateParams
  **/
  @Schema(description = "")
  public String getTemplateParams() {
    return templateParams;
  }

  public void setTemplateParams(String templateParams) {
    this.templateParams = templateParams;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatasetRestApiPut datasetRestApiPut = (DatasetRestApiPut) o;
    return Objects.equals(this.cacheTimeout, datasetRestApiPut.cacheTimeout) &&
        Objects.equals(this.columns, datasetRestApiPut.columns) &&
        Objects.equals(this.databaseId, datasetRestApiPut.databaseId) &&
        Objects.equals(this.defaultEndpoint, datasetRestApiPut.defaultEndpoint) &&
        Objects.equals(this.description, datasetRestApiPut.description) &&
        Objects.equals(this.externalUrl, datasetRestApiPut.externalUrl) &&
        Objects.equals(this.extra, datasetRestApiPut.extra) &&
        Objects.equals(this.fetchValuesPredicate, datasetRestApiPut.fetchValuesPredicate) &&
        Objects.equals(this.filterSelectEnabled, datasetRestApiPut.filterSelectEnabled) &&
        Objects.equals(this.isManagedExternally, datasetRestApiPut.isManagedExternally) &&
        Objects.equals(this.isSqllabView, datasetRestApiPut.isSqllabView) &&
        Objects.equals(this.mainDttmCol, datasetRestApiPut.mainDttmCol) &&
        Objects.equals(this.metrics, datasetRestApiPut.metrics) &&
        Objects.equals(this.offset, datasetRestApiPut.offset) &&
        Objects.equals(this.owners, datasetRestApiPut.owners) &&
        Objects.equals(this.schema, datasetRestApiPut.schema) &&
        Objects.equals(this.sql, datasetRestApiPut.sql) &&
        Objects.equals(this.tableName, datasetRestApiPut.tableName) &&
        Objects.equals(this.templateParams, datasetRestApiPut.templateParams);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheTimeout, columns, databaseId, defaultEndpoint, description, externalUrl, extra, fetchValuesPredicate, filterSelectEnabled, isManagedExternally, isSqllabView, mainDttmCol, metrics, offset, owners, schema, sql, tableName, templateParams);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatasetRestApiPut {\n");
    
    sb.append("    cacheTimeout: ").append(toIndentedString(cacheTimeout)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    databaseId: ").append(toIndentedString(databaseId)).append("\n");
    sb.append("    defaultEndpoint: ").append(toIndentedString(defaultEndpoint)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    externalUrl: ").append(toIndentedString(externalUrl)).append("\n");
    sb.append("    extra: ").append(toIndentedString(extra)).append("\n");
    sb.append("    fetchValuesPredicate: ").append(toIndentedString(fetchValuesPredicate)).append("\n");
    sb.append("    filterSelectEnabled: ").append(toIndentedString(filterSelectEnabled)).append("\n");
    sb.append("    isManagedExternally: ").append(toIndentedString(isManagedExternally)).append("\n");
    sb.append("    isSqllabView: ").append(toIndentedString(isSqllabView)).append("\n");
    sb.append("    mainDttmCol: ").append(toIndentedString(mainDttmCol)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    owners: ").append(toIndentedString(owners)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    sql: ").append(toIndentedString(sql)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    templateParams: ").append(toIndentedString(templateParams)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
