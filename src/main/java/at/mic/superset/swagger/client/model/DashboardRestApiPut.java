/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * DashboardRestApiPut
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-08-29T14:48:42.974+02:00[Europe/Berlin]")
public class DashboardRestApiPut {
  @SerializedName("certification_details")
  private String certificationDetails = null;

  @SerializedName("certified_by")
  private String certifiedBy = null;

  @SerializedName("css")
  private String css = null;

  @SerializedName("dashboard_title")
  private String dashboardTitle = null;

  @SerializedName("external_url")
  private String externalUrl = null;

  @SerializedName("is_managed_externally")
  private Boolean isManagedExternally = null;

  @SerializedName("json_metadata")
  private String jsonMetadata = null;

  @SerializedName("owners")
  private List<Integer> owners = null;

  @SerializedName("position_json")
  private String positionJson = null;

  @SerializedName("published")
  private Boolean published = null;

  @SerializedName("roles")
  private List<Integer> roles = null;

  @SerializedName("slug")
  private String slug = null;

  public DashboardRestApiPut certificationDetails(String certificationDetails) {
    this.certificationDetails = certificationDetails;
    return this;
  }

   /**
   * Details of the certification
   * @return certificationDetails
  **/
  @Schema(description = "Details of the certification")
  public String getCertificationDetails() {
    return certificationDetails;
  }

  public void setCertificationDetails(String certificationDetails) {
    this.certificationDetails = certificationDetails;
  }

  public DashboardRestApiPut certifiedBy(String certifiedBy) {
    this.certifiedBy = certifiedBy;
    return this;
  }

   /**
   * Person or group that has certified this dashboard
   * @return certifiedBy
  **/
  @Schema(description = "Person or group that has certified this dashboard")
  public String getCertifiedBy() {
    return certifiedBy;
  }

  public void setCertifiedBy(String certifiedBy) {
    this.certifiedBy = certifiedBy;
  }

  public DashboardRestApiPut css(String css) {
    this.css = css;
    return this;
  }

   /**
   * Override CSS for the dashboard.
   * @return css
  **/
  @Schema(description = "Override CSS for the dashboard.")
  public String getCss() {
    return css;
  }

  public void setCss(String css) {
    this.css = css;
  }

  public DashboardRestApiPut dashboardTitle(String dashboardTitle) {
    this.dashboardTitle = dashboardTitle;
    return this;
  }

   /**
   * A title for the dashboard.
   * @return dashboardTitle
  **/
  @Schema(description = "A title for the dashboard.")
  public String getDashboardTitle() {
    return dashboardTitle;
  }

  public void setDashboardTitle(String dashboardTitle) {
    this.dashboardTitle = dashboardTitle;
  }

  public DashboardRestApiPut externalUrl(String externalUrl) {
    this.externalUrl = externalUrl;
    return this;
  }

   /**
   * Get externalUrl
   * @return externalUrl
  **/
  @Schema(description = "")
  public String getExternalUrl() {
    return externalUrl;
  }

  public void setExternalUrl(String externalUrl) {
    this.externalUrl = externalUrl;
  }

  public DashboardRestApiPut isManagedExternally(Boolean isManagedExternally) {
    this.isManagedExternally = isManagedExternally;
    return this;
  }

   /**
   * Get isManagedExternally
   * @return isManagedExternally
  **/
  @Schema(description = "")
  public Boolean isIsManagedExternally() {
    return isManagedExternally;
  }

  public void setIsManagedExternally(Boolean isManagedExternally) {
    this.isManagedExternally = isManagedExternally;
  }

  public DashboardRestApiPut jsonMetadata(String jsonMetadata) {
    this.jsonMetadata = jsonMetadata;
    return this;
  }

   /**
   * This JSON object is generated dynamically when clicking the save or overwrite button in the dashboard view. It is exposed here for reference and for power users who may want to alter  specific parameters.
   * @return jsonMetadata
  **/
  @Schema(description = "This JSON object is generated dynamically when clicking the save or overwrite button in the dashboard view. It is exposed here for reference and for power users who may want to alter  specific parameters.")
  public String getJsonMetadata() {
    return jsonMetadata;
  }

  public void setJsonMetadata(String jsonMetadata) {
    this.jsonMetadata = jsonMetadata;
  }

  public DashboardRestApiPut owners(List<Integer> owners) {
    this.owners = owners;
    return this;
  }

  public DashboardRestApiPut addOwnersItem(Integer ownersItem) {
    if (this.owners == null) {
      this.owners = new ArrayList<Integer>();
    }
    this.owners.add(ownersItem);
    return this;
  }

   /**
   * Get owners
   * @return owners
  **/
  @Schema(description = "")
  public List<Integer> getOwners() {
    return owners;
  }

  public void setOwners(List<Integer> owners) {
    this.owners = owners;
  }

  public DashboardRestApiPut positionJson(String positionJson) {
    this.positionJson = positionJson;
    return this;
  }

   /**
   * This json object describes the positioning of the widgets in the dashboard. It is dynamically generated when adjusting the widgets size and positions by using drag &amp; drop in the dashboard view
   * @return positionJson
  **/
  @Schema(description = "This json object describes the positioning of the widgets in the dashboard. It is dynamically generated when adjusting the widgets size and positions by using drag & drop in the dashboard view")
  public String getPositionJson() {
    return positionJson;
  }

  public void setPositionJson(String positionJson) {
    this.positionJson = positionJson;
  }

  public DashboardRestApiPut published(Boolean published) {
    this.published = published;
    return this;
  }

   /**
   * Determines whether or not this dashboard is visible in the list of all dashboards.
   * @return published
  **/
  @Schema(description = "Determines whether or not this dashboard is visible in the list of all dashboards.")
  public Boolean isPublished() {
    return published;
  }

  public void setPublished(Boolean published) {
    this.published = published;
  }

  public DashboardRestApiPut roles(List<Integer> roles) {
    this.roles = roles;
    return this;
  }

  public DashboardRestApiPut addRolesItem(Integer rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<Integer>();
    }
    this.roles.add(rolesItem);
    return this;
  }

   /**
   * Get roles
   * @return roles
  **/
  @Schema(description = "")
  public List<Integer> getRoles() {
    return roles;
  }

  public void setRoles(List<Integer> roles) {
    this.roles = roles;
  }

  public DashboardRestApiPut slug(String slug) {
    this.slug = slug;
    return this;
  }

   /**
   * Unique identifying part for the web address of the dashboard.
   * @return slug
  **/
  @Schema(description = "Unique identifying part for the web address of the dashboard.")
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DashboardRestApiPut dashboardRestApiPut = (DashboardRestApiPut) o;
    return Objects.equals(this.certificationDetails, dashboardRestApiPut.certificationDetails) &&
        Objects.equals(this.certifiedBy, dashboardRestApiPut.certifiedBy) &&
        Objects.equals(this.css, dashboardRestApiPut.css) &&
        Objects.equals(this.dashboardTitle, dashboardRestApiPut.dashboardTitle) &&
        Objects.equals(this.externalUrl, dashboardRestApiPut.externalUrl) &&
        Objects.equals(this.isManagedExternally, dashboardRestApiPut.isManagedExternally) &&
        Objects.equals(this.jsonMetadata, dashboardRestApiPut.jsonMetadata) &&
        Objects.equals(this.owners, dashboardRestApiPut.owners) &&
        Objects.equals(this.positionJson, dashboardRestApiPut.positionJson) &&
        Objects.equals(this.published, dashboardRestApiPut.published) &&
        Objects.equals(this.roles, dashboardRestApiPut.roles) &&
        Objects.equals(this.slug, dashboardRestApiPut.slug);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificationDetails, certifiedBy, css, dashboardTitle, externalUrl, isManagedExternally, jsonMetadata, owners, positionJson, published, roles, slug);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DashboardRestApiPut {\n");
    
    sb.append("    certificationDetails: ").append(toIndentedString(certificationDetails)).append("\n");
    sb.append("    certifiedBy: ").append(toIndentedString(certifiedBy)).append("\n");
    sb.append("    css: ").append(toIndentedString(css)).append("\n");
    sb.append("    dashboardTitle: ").append(toIndentedString(dashboardTitle)).append("\n");
    sb.append("    externalUrl: ").append(toIndentedString(externalUrl)).append("\n");
    sb.append("    isManagedExternally: ").append(toIndentedString(isManagedExternally)).append("\n");
    sb.append("    jsonMetadata: ").append(toIndentedString(jsonMetadata)).append("\n");
    sb.append("    owners: ").append(toIndentedString(owners)).append("\n");
    sb.append("    positionJson: ").append(toIndentedString(positionJson)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
