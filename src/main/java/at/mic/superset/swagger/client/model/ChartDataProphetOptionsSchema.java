/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ChartDataProphetOptionsSchema
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-08-29T14:48:42.974+02:00[Europe/Berlin]")
public class ChartDataProphetOptionsSchema {
  @SerializedName("confidence_interval")
  private Float confidenceInterval = null;

  @SerializedName("monthly_seasonality")
  private Object monthlySeasonality = null;

  @SerializedName("periods")
  private Integer periods = null;

  /**
   * Time grain used to specify time period increments in prediction. Supports [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) durations.
   */
  @JsonAdapter(TimeGrainEnum.Adapter.class)
  public enum TimeGrainEnum {
    PT1S("PT1S"),
    PT5S("PT5S"),
    PT30S("PT30S"),
    PT1M("PT1M"),
    PT5M("PT5M"),
    PT10M("PT10M"),
    PT15M("PT15M"),
    PT30M("PT30M"),
    PT1H("PT1H"),
    PT6H("PT6H"),
    P1D("P1D"),
    P1W("P1W"),
    P1M("P1M"),
    P3M("P3M"),
    P1Y("P1Y"),
    _1969_12_28T00_00_00Z_P1W("1969-12-28T00:00:00Z/P1W"),
    _1969_12_29T00_00_00Z_P1W("1969-12-29T00:00:00Z/P1W"),
    P1W_1970_01_03T00_00_00Z("P1W/1970-01-03T00:00:00Z"),
    P1W_1970_01_04T00_00_00Z("P1W/1970-01-04T00:00:00Z");

    private String value;

    TimeGrainEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TimeGrainEnum fromValue(String input) {
      for (TimeGrainEnum b : TimeGrainEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TimeGrainEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TimeGrainEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TimeGrainEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TimeGrainEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("time_grain")
  private TimeGrainEnum timeGrain = null;

  @SerializedName("weekly_seasonality")
  private Object weeklySeasonality = null;

  @SerializedName("yearly_seasonality")
  private Object yearlySeasonality = null;

  public ChartDataProphetOptionsSchema confidenceInterval(Float confidenceInterval) {
    this.confidenceInterval = confidenceInterval;
    return this;
  }

   /**
   * Width of predicted confidence interval
   * minimum: 0
   * maximum: 1
   * @return confidenceInterval
  **/
  @Schema(example = "0.8", required = true, description = "Width of predicted confidence interval")
  public Float getConfidenceInterval() {
    return confidenceInterval;
  }

  public void setConfidenceInterval(Float confidenceInterval) {
    this.confidenceInterval = confidenceInterval;
  }

  public ChartDataProphetOptionsSchema monthlySeasonality(Object monthlySeasonality) {
    this.monthlySeasonality = monthlySeasonality;
    return this;
  }

   /**
   * Should monthly seasonality be applied. An integer value will specify Fourier order of seasonality, &#x60;None&#x60; will automatically detect seasonality.
   * @return monthlySeasonality
  **/
  @Schema(example = "false", description = "Should monthly seasonality be applied. An integer value will specify Fourier order of seasonality, `None` will automatically detect seasonality.")
  public Object getMonthlySeasonality() {
    return monthlySeasonality;
  }

  public void setMonthlySeasonality(Object monthlySeasonality) {
    this.monthlySeasonality = monthlySeasonality;
  }

  public ChartDataProphetOptionsSchema periods(Integer periods) {
    this.periods = periods;
    return this;
  }

   /**
   * Get periods
   * @return periods
  **/
  @Schema(example = "7", required = true, description = "")
  public Integer getPeriods() {
    return periods;
  }

  public void setPeriods(Integer periods) {
    this.periods = periods;
  }

  public ChartDataProphetOptionsSchema timeGrain(TimeGrainEnum timeGrain) {
    this.timeGrain = timeGrain;
    return this;
  }

   /**
   * Time grain used to specify time period increments in prediction. Supports [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) durations.
   * @return timeGrain
  **/
  @Schema(example = "P1D", required = true, description = "Time grain used to specify time period increments in prediction. Supports [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) durations.")
  public TimeGrainEnum getTimeGrain() {
    return timeGrain;
  }

  public void setTimeGrain(TimeGrainEnum timeGrain) {
    this.timeGrain = timeGrain;
  }

  public ChartDataProphetOptionsSchema weeklySeasonality(Object weeklySeasonality) {
    this.weeklySeasonality = weeklySeasonality;
    return this;
  }

   /**
   * Should weekly seasonality be applied. An integer value will specify Fourier order of seasonality, &#x60;None&#x60; will automatically detect seasonality.
   * @return weeklySeasonality
  **/
  @Schema(example = "false", description = "Should weekly seasonality be applied. An integer value will specify Fourier order of seasonality, `None` will automatically detect seasonality.")
  public Object getWeeklySeasonality() {
    return weeklySeasonality;
  }

  public void setWeeklySeasonality(Object weeklySeasonality) {
    this.weeklySeasonality = weeklySeasonality;
  }

  public ChartDataProphetOptionsSchema yearlySeasonality(Object yearlySeasonality) {
    this.yearlySeasonality = yearlySeasonality;
    return this;
  }

   /**
   * Should yearly seasonality be applied. An integer value will specify Fourier order of seasonality, &#x60;None&#x60; will automatically detect seasonality.
   * @return yearlySeasonality
  **/
  @Schema(example = "false", description = "Should yearly seasonality be applied. An integer value will specify Fourier order of seasonality, `None` will automatically detect seasonality.")
  public Object getYearlySeasonality() {
    return yearlySeasonality;
  }

  public void setYearlySeasonality(Object yearlySeasonality) {
    this.yearlySeasonality = yearlySeasonality;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartDataProphetOptionsSchema chartDataProphetOptionsSchema = (ChartDataProphetOptionsSchema) o;
    return Objects.equals(this.confidenceInterval, chartDataProphetOptionsSchema.confidenceInterval) &&
        Objects.equals(this.monthlySeasonality, chartDataProphetOptionsSchema.monthlySeasonality) &&
        Objects.equals(this.periods, chartDataProphetOptionsSchema.periods) &&
        Objects.equals(this.timeGrain, chartDataProphetOptionsSchema.timeGrain) &&
        Objects.equals(this.weeklySeasonality, chartDataProphetOptionsSchema.weeklySeasonality) &&
        Objects.equals(this.yearlySeasonality, chartDataProphetOptionsSchema.yearlySeasonality);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confidenceInterval, monthlySeasonality, periods, timeGrain, weeklySeasonality, yearlySeasonality);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartDataProphetOptionsSchema {\n");
    
    sb.append("    confidenceInterval: ").append(toIndentedString(confidenceInterval)).append("\n");
    sb.append("    monthlySeasonality: ").append(toIndentedString(monthlySeasonality)).append("\n");
    sb.append("    periods: ").append(toIndentedString(periods)).append("\n");
    sb.append("    timeGrain: ").append(toIndentedString(timeGrain)).append("\n");
    sb.append("    weeklySeasonality: ").append(toIndentedString(weeklySeasonality)).append("\n");
    sb.append("    yearlySeasonality: ").append(toIndentedString(yearlySeasonality)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
