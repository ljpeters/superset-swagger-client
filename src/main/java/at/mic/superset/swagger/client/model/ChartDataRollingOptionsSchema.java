/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ChartDataRollingOptionsSchema
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-06T17:36:10.263+01:00[Europe/Vienna]")
public class ChartDataRollingOptionsSchema {
  @SerializedName("center")
  private Boolean center = null;

  @SerializedName("min_periods")
  private Integer minPeriods = null;

  /**
   * Type of rolling window. Any numpy function will work.
   */
  @JsonAdapter(RollingTypeEnum.Adapter.class)
  public enum RollingTypeEnum {
    AVERAGE("average"),
    ARGMIN("argmin"),
    ARGMAX("argmax"),
    CUMSUM("cumsum"),
    CUMPROD("cumprod"),
    MAX("max"),
    MEAN("mean"),
    MEDIAN("median"),
    NANSUM("nansum"),
    NANMIN("nanmin"),
    NANMAX("nanmax"),
    NANMEAN("nanmean"),
    NANMEDIAN("nanmedian"),
    MIN("min"),
    PERCENTILE("percentile"),
    PROD("prod"),
    PRODUCT("product"),
    STD("std"),
    SUM("sum"),
    VAR("var");

    private String value;

    RollingTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RollingTypeEnum fromValue(String text) {
      for (RollingTypeEnum b : RollingTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RollingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RollingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RollingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RollingTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("rolling_type")
  private RollingTypeEnum rollingType = null;

  @SerializedName("rolling_type_options")
  private Object rollingTypeOptions = null;

  /**
   * Type of window function. See [SciPy window functions](https://docs.scipy.org/doc/scipy/reference/signal.windows.html#module-scipy.signal.windows) for more details. Some window functions require passing additional parameters to &#x60;rolling_type_options&#x60;. For instance, to use &#x60;gaussian&#x60;, the parameter &#x60;std&#x60; needs to be provided.
   */
  @JsonAdapter(WinTypeEnum.Adapter.class)
  public enum WinTypeEnum {
    BOXCAR("boxcar"),
    TRIANG("triang"),
    BLACKMAN("blackman"),
    HAMMING("hamming"),
    BARTLETT("bartlett"),
    PARZEN("parzen"),
    BOHMAN("bohman"),
    BLACKMANHARRIS("blackmanharris"),
    NUTTALL("nuttall"),
    BARTHANN("barthann"),
    KAISER("kaiser"),
    GAUSSIAN("gaussian"),
    GENERAL_GAUSSIAN("general_gaussian"),
    SLEPIAN("slepian"),
    EXPONENTIAL("exponential");

    private String value;

    WinTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static WinTypeEnum fromValue(String text) {
      for (WinTypeEnum b : WinTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<WinTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WinTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WinTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return WinTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("win_type")
  private WinTypeEnum winType = null;

  @SerializedName("window")
  private Integer window = null;

  public ChartDataRollingOptionsSchema center(Boolean center) {
    this.center = center;
    return this;
  }

   /**
   * Should the label be at the center of the window. Default: &#x60;false&#x60;
   * @return center
  **/
  @Schema(example = "false", description = "Should the label be at the center of the window. Default: `false`")
  public Boolean isCenter() {
    return center;
  }

  public void setCenter(Boolean center) {
    this.center = center;
  }

  public ChartDataRollingOptionsSchema minPeriods(Integer minPeriods) {
    this.minPeriods = minPeriods;
    return this;
  }

   /**
   * The minimum amount of periods required for a row to be included in the result set.
   * @return minPeriods
  **/
  @Schema(example = "7", description = "The minimum amount of periods required for a row to be included in the result set.")
  public Integer getMinPeriods() {
    return minPeriods;
  }

  public void setMinPeriods(Integer minPeriods) {
    this.minPeriods = minPeriods;
  }

  public ChartDataRollingOptionsSchema rollingType(RollingTypeEnum rollingType) {
    this.rollingType = rollingType;
    return this;
  }

   /**
   * Type of rolling window. Any numpy function will work.
   * @return rollingType
  **/
  @Schema(example = "percentile", required = true, description = "Type of rolling window. Any numpy function will work.")
  public RollingTypeEnum getRollingType() {
    return rollingType;
  }

  public void setRollingType(RollingTypeEnum rollingType) {
    this.rollingType = rollingType;
  }

  public ChartDataRollingOptionsSchema rollingTypeOptions(Object rollingTypeOptions) {
    this.rollingTypeOptions = rollingTypeOptions;
    return this;
  }

   /**
   * Get rollingTypeOptions
   * @return rollingTypeOptions
  **/
  @Schema(example = "{}", description = "")
  public Object getRollingTypeOptions() {
    return rollingTypeOptions;
  }

  public void setRollingTypeOptions(Object rollingTypeOptions) {
    this.rollingTypeOptions = rollingTypeOptions;
  }

  public ChartDataRollingOptionsSchema winType(WinTypeEnum winType) {
    this.winType = winType;
    return this;
  }

   /**
   * Type of window function. See [SciPy window functions](https://docs.scipy.org/doc/scipy/reference/signal.windows.html#module-scipy.signal.windows) for more details. Some window functions require passing additional parameters to &#x60;rolling_type_options&#x60;. For instance, to use &#x60;gaussian&#x60;, the parameter &#x60;std&#x60; needs to be provided.
   * @return winType
  **/
  @Schema(description = "Type of window function. See [SciPy window functions](https://docs.scipy.org/doc/scipy/reference/signal.windows.html#module-scipy.signal.windows) for more details. Some window functions require passing additional parameters to `rolling_type_options`. For instance, to use `gaussian`, the parameter `std` needs to be provided.")
  public WinTypeEnum getWinType() {
    return winType;
  }

  public void setWinType(WinTypeEnum winType) {
    this.winType = winType;
  }

  public ChartDataRollingOptionsSchema window(Integer window) {
    this.window = window;
    return this;
  }

   /**
   * Size of the rolling window in days.
   * @return window
  **/
  @Schema(example = "7", required = true, description = "Size of the rolling window in days.")
  public Integer getWindow() {
    return window;
  }

  public void setWindow(Integer window) {
    this.window = window;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartDataRollingOptionsSchema chartDataRollingOptionsSchema = (ChartDataRollingOptionsSchema) o;
    return Objects.equals(this.center, chartDataRollingOptionsSchema.center) &&
        Objects.equals(this.minPeriods, chartDataRollingOptionsSchema.minPeriods) &&
        Objects.equals(this.rollingType, chartDataRollingOptionsSchema.rollingType) &&
        Objects.equals(this.rollingTypeOptions, chartDataRollingOptionsSchema.rollingTypeOptions) &&
        Objects.equals(this.winType, chartDataRollingOptionsSchema.winType) &&
        Objects.equals(this.window, chartDataRollingOptionsSchema.window);
  }

  @Override
  public int hashCode() {
    return Objects.hash(center, minPeriods, rollingType, rollingTypeOptions, winType, window);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartDataRollingOptionsSchema {\n");
    
    sb.append("    center: ").append(toIndentedString(center)).append("\n");
    sb.append("    minPeriods: ").append(toIndentedString(minPeriods)).append("\n");
    sb.append("    rollingType: ").append(toIndentedString(rollingType)).append("\n");
    sb.append("    rollingTypeOptions: ").append(toIndentedString(rollingTypeOptions)).append("\n");
    sb.append("    winType: ").append(toIndentedString(winType)).append("\n");
    sb.append("    window: ").append(toIndentedString(window)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
