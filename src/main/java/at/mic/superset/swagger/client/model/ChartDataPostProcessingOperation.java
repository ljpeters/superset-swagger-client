/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ChartDataPostProcessingOperation
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-08-29T14:48:42.974+02:00[Europe/Berlin]")
public class ChartDataPostProcessingOperation {
  /**
   * Post processing operation type
   */
  @JsonAdapter(OperationEnum.Adapter.class)
  public enum OperationEnum {
    _FLATTEN_COLUMN_AFTER_PIVOT("_flatten_column_after_pivot"),
    AGGREGATE("aggregate"),
    BOXPLOT("boxplot"),
    COMPARE("compare"),
    CONTRIBUTION("contribution"),
    CUM("cum"),
    DIFF("diff"),
    FLATTEN("flatten"),
    GEODETIC_PARSE("geodetic_parse"),
    GEOHASH_DECODE("geohash_decode"),
    GEOHASH_ENCODE("geohash_encode"),
    PIVOT("pivot"),
    PROPHET("prophet"),
    RENAME("rename"),
    RESAMPLE("resample"),
    ROLLING("rolling"),
    SELECT("select"),
    SORT("sort");

    private String value;

    OperationEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OperationEnum fromValue(String input) {
      for (OperationEnum b : OperationEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OperationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public OperationEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return OperationEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("operation")
  private OperationEnum operation = null;

  @SerializedName("options")
  private Object options = null;

  public ChartDataPostProcessingOperation operation(OperationEnum operation) {
    this.operation = operation;
    return this;
  }

   /**
   * Post processing operation type
   * @return operation
  **/
  @Schema(example = "aggregate", required = true, description = "Post processing operation type")
  public OperationEnum getOperation() {
    return operation;
  }

  public void setOperation(OperationEnum operation) {
    this.operation = operation;
  }

  public ChartDataPostProcessingOperation options(Object options) {
    this.options = options;
    return this;
  }

   /**
   * Options specifying how to perform the operation. Please refer to the respective post processing operation option schemas. For example, &#x60;ChartDataPostProcessingOperationOptions&#x60; specifies the required options for the pivot operation.
   * @return options
  **/
  @Schema(example = "{\"aggregates\":{\"age_mean\":{\"column\":\"age\",\"operator\":\"mean\"},\"age_q1\":{\"column\":\"age\",\"operator\":\"percentile\",\"options\":{\"q\":0.25}}},\"groupby\":[\"country\",\"gender\"]}", description = "Options specifying how to perform the operation. Please refer to the respective post processing operation option schemas. For example, `ChartDataPostProcessingOperationOptions` specifies the required options for the pivot operation.")
  public Object getOptions() {
    return options;
  }

  public void setOptions(Object options) {
    this.options = options;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartDataPostProcessingOperation chartDataPostProcessingOperation = (ChartDataPostProcessingOperation) o;
    return Objects.equals(this.operation, chartDataPostProcessingOperation.operation) &&
        Objects.equals(this.options, chartDataPostProcessingOperation.options);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operation, options);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartDataPostProcessingOperation {\n");
    
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
