/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import at.mic.superset.swagger.client.model.Database1;
import at.mic.superset.swagger.client.model.User;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * QueryRestApiGetList
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-08-29T14:48:42.974+02:00[Europe/Berlin]")
public class QueryRestApiGetList {
  @SerializedName("changed_on")
  private OffsetDateTime changedOn = null;

  @SerializedName("database")
  private Database1 database = null;

  @SerializedName("end_time")
  private Float endTime = null;

  @SerializedName("executed_sql")
  private String executedSql = null;

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("rows")
  private Integer rows = null;

  @SerializedName("schema")
  private String schema = null;

  @SerializedName("sql")
  private String sql = null;

  @SerializedName("sql_tables")
  private Object sqlTables = null;

  @SerializedName("start_time")
  private Float startTime = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("tab_name")
  private String tabName = null;

  @SerializedName("tmp_table_name")
  private String tmpTableName = null;

  @SerializedName("tracking_url")
  private String trackingUrl = null;

  @SerializedName("user")
  private User user = null;

  public QueryRestApiGetList changedOn(OffsetDateTime changedOn) {
    this.changedOn = changedOn;
    return this;
  }

   /**
   * Get changedOn
   * @return changedOn
  **/
  @Schema(description = "")
  public OffsetDateTime getChangedOn() {
    return changedOn;
  }

  public void setChangedOn(OffsetDateTime changedOn) {
    this.changedOn = changedOn;
  }

  public QueryRestApiGetList database(Database1 database) {
    this.database = database;
    return this;
  }

   /**
   * Get database
   * @return database
  **/
  @Schema(description = "")
  public Database1 getDatabase() {
    return database;
  }

  public void setDatabase(Database1 database) {
    this.database = database;
  }

  public QueryRestApiGetList endTime(Float endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * Get endTime
   * @return endTime
  **/
  @Schema(description = "")
  public Float getEndTime() {
    return endTime;
  }

  public void setEndTime(Float endTime) {
    this.endTime = endTime;
  }

  public QueryRestApiGetList executedSql(String executedSql) {
    this.executedSql = executedSql;
    return this;
  }

   /**
   * Get executedSql
   * @return executedSql
  **/
  @Schema(description = "")
  public String getExecutedSql() {
    return executedSql;
  }

  public void setExecutedSql(String executedSql) {
    this.executedSql = executedSql;
  }

  public QueryRestApiGetList id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public QueryRestApiGetList rows(Integer rows) {
    this.rows = rows;
    return this;
  }

   /**
   * Get rows
   * @return rows
  **/
  @Schema(description = "")
  public Integer getRows() {
    return rows;
  }

  public void setRows(Integer rows) {
    this.rows = rows;
  }

  public QueryRestApiGetList schema(String schema) {
    this.schema = schema;
    return this;
  }

   /**
   * Get schema
   * @return schema
  **/
  @Schema(description = "")
  public String getSchema() {
    return schema;
  }

  public void setSchema(String schema) {
    this.schema = schema;
  }

  public QueryRestApiGetList sql(String sql) {
    this.sql = sql;
    return this;
  }

   /**
   * Get sql
   * @return sql
  **/
  @Schema(description = "")
  public String getSql() {
    return sql;
  }

  public void setSql(String sql) {
    this.sql = sql;
  }

   /**
   * Get sqlTables
   * @return sqlTables
  **/
  @Schema(description = "")
  public Object getSqlTables() {
    return sqlTables;
  }

  public QueryRestApiGetList startTime(Float startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * Get startTime
   * @return startTime
  **/
  @Schema(description = "")
  public Float getStartTime() {
    return startTime;
  }

  public void setStartTime(Float startTime) {
    this.startTime = startTime;
  }

  public QueryRestApiGetList status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public QueryRestApiGetList tabName(String tabName) {
    this.tabName = tabName;
    return this;
  }

   /**
   * Get tabName
   * @return tabName
  **/
  @Schema(description = "")
  public String getTabName() {
    return tabName;
  }

  public void setTabName(String tabName) {
    this.tabName = tabName;
  }

  public QueryRestApiGetList tmpTableName(String tmpTableName) {
    this.tmpTableName = tmpTableName;
    return this;
  }

   /**
   * Get tmpTableName
   * @return tmpTableName
  **/
  @Schema(description = "")
  public String getTmpTableName() {
    return tmpTableName;
  }

  public void setTmpTableName(String tmpTableName) {
    this.tmpTableName = tmpTableName;
  }

  public QueryRestApiGetList trackingUrl(String trackingUrl) {
    this.trackingUrl = trackingUrl;
    return this;
  }

   /**
   * Get trackingUrl
   * @return trackingUrl
  **/
  @Schema(description = "")
  public String getTrackingUrl() {
    return trackingUrl;
  }

  public void setTrackingUrl(String trackingUrl) {
    this.trackingUrl = trackingUrl;
  }

  public QueryRestApiGetList user(User user) {
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @Schema(description = "")
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryRestApiGetList queryRestApiGetList = (QueryRestApiGetList) o;
    return Objects.equals(this.changedOn, queryRestApiGetList.changedOn) &&
        Objects.equals(this.database, queryRestApiGetList.database) &&
        Objects.equals(this.endTime, queryRestApiGetList.endTime) &&
        Objects.equals(this.executedSql, queryRestApiGetList.executedSql) &&
        Objects.equals(this.id, queryRestApiGetList.id) &&
        Objects.equals(this.rows, queryRestApiGetList.rows) &&
        Objects.equals(this.schema, queryRestApiGetList.schema) &&
        Objects.equals(this.sql, queryRestApiGetList.sql) &&
        Objects.equals(this.sqlTables, queryRestApiGetList.sqlTables) &&
        Objects.equals(this.startTime, queryRestApiGetList.startTime) &&
        Objects.equals(this.status, queryRestApiGetList.status) &&
        Objects.equals(this.tabName, queryRestApiGetList.tabName) &&
        Objects.equals(this.tmpTableName, queryRestApiGetList.tmpTableName) &&
        Objects.equals(this.trackingUrl, queryRestApiGetList.trackingUrl) &&
        Objects.equals(this.user, queryRestApiGetList.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changedOn, database, endTime, executedSql, id, rows, schema, sql, sqlTables, startTime, status, tabName, tmpTableName, trackingUrl, user);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryRestApiGetList {\n");
    
    sb.append("    changedOn: ").append(toIndentedString(changedOn)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    executedSql: ").append(toIndentedString(executedSql)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    sql: ").append(toIndentedString(sql)).append("\n");
    sb.append("    sqlTables: ").append(toIndentedString(sqlTables)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tabName: ").append(toIndentedString(tabName)).append("\n");
    sb.append("    tmpTableName: ").append(toIndentedString(tmpTableName)).append("\n");
    sb.append("    trackingUrl: ").append(toIndentedString(trackingUrl)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
