/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Body
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-06T17:36:10.263+01:00[Europe/Vienna]")
public class Body {
  @SerializedName("password")
  private String password = null;

  /**
   * Choose an authentication provider
   */
  @JsonAdapter(ProviderEnum.Adapter.class)
  public enum ProviderEnum {
    DB("db"),
    LDAP("ldap");

    private String value;

    ProviderEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ProviderEnum fromValue(String text) {
      for (ProviderEnum b : ProviderEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ProviderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProviderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProviderEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ProviderEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("provider")
  private ProviderEnum provider = null;

  @SerializedName("refresh")
  private Boolean refresh = null;

  @SerializedName("username")
  private String username = null;

  public Body password(String password) {
    this.password = password;
    return this;
  }

   /**
   * The password for authentication
   * @return password
  **/
  @Schema(example = "complex-password", description = "The password for authentication")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public Body provider(ProviderEnum provider) {
    this.provider = provider;
    return this;
  }

   /**
   * Choose an authentication provider
   * @return provider
  **/
  @Schema(example = "db", description = "Choose an authentication provider")
  public ProviderEnum getProvider() {
    return provider;
  }

  public void setProvider(ProviderEnum provider) {
    this.provider = provider;
  }

  public Body refresh(Boolean refresh) {
    this.refresh = refresh;
    return this;
  }

   /**
   * If true a refresh token is provided also
   * @return refresh
  **/
  @Schema(example = "true", description = "If true a refresh token is provided also")
  public Boolean isRefresh() {
    return refresh;
  }

  public void setRefresh(Boolean refresh) {
    this.refresh = refresh;
  }

  public Body username(String username) {
    this.username = username;
    return this;
  }

   /**
   * The username for authentication
   * @return username
  **/
  @Schema(example = "admin", description = "The username for authentication")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Body body = (Body) o;
    return Objects.equals(this.password, body.password) &&
        Objects.equals(this.provider, body.provider) &&
        Objects.equals(this.refresh, body.refresh) &&
        Objects.equals(this.username, body.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(password, provider, refresh, username);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Body {\n");
    
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    refresh: ").append(toIndentedString(refresh)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
