/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import at.mic.superset.swagger.client.model.GetListSchemaFilters;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * GetListSchema
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-06T17:36:10.263+01:00[Europe/Vienna]")
public class GetListSchema {
  @SerializedName("columns")
  private List<String> columns = null;

  @SerializedName("filters")
  private List<GetListSchemaFilters> filters = null;

  /**
   * Gets or Sets keys
   */
  @JsonAdapter(KeysEnum.Adapter.class)
  public enum KeysEnum {
    LIST_COLUMNS("list_columns"),
    ORDER_COLUMNS("order_columns"),
    LABEL_COLUMNS("label_columns"),
    DESCRIPTION_COLUMNS("description_columns"),
    LIST_TITLE("list_title"),
    NONE("none");

    private String value;

    KeysEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static KeysEnum fromValue(String text) {
      for (KeysEnum b : KeysEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<KeysEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeysEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeysEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return KeysEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("keys")
  private List<KeysEnum> keys = null;

  @SerializedName("order_column")
  private String orderColumn = null;

  /**
   * Gets or Sets orderDirection
   */
  @JsonAdapter(OrderDirectionEnum.Adapter.class)
  public enum OrderDirectionEnum {
    ASC("asc"),
    DESC("desc");

    private String value;

    OrderDirectionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OrderDirectionEnum fromValue(String text) {
      for (OrderDirectionEnum b : OrderDirectionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OrderDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrderDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OrderDirectionEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("order_direction")
  private OrderDirectionEnum orderDirection = null;

  @SerializedName("page")
  private Integer page = null;

  @SerializedName("page_size")
  private Integer pageSize = null;

  public GetListSchema columns(List<String> columns) {
    this.columns = columns;
    return this;
  }

  public GetListSchema addColumnsItem(String columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<String>();
    }
    this.columns.add(columnsItem);
    return this;
  }

   /**
   * Get columns
   * @return columns
  **/
  @Schema(description = "")
  public List<String> getColumns() {
    return columns;
  }

  public void setColumns(List<String> columns) {
    this.columns = columns;
  }

  public GetListSchema filters(List<GetListSchemaFilters> filters) {
    this.filters = filters;
    return this;
  }

  public GetListSchema addFiltersItem(GetListSchemaFilters filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<GetListSchemaFilters>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @Schema(description = "")
  public List<GetListSchemaFilters> getFilters() {
    return filters;
  }

  public void setFilters(List<GetListSchemaFilters> filters) {
    this.filters = filters;
  }

  public GetListSchema keys(List<KeysEnum> keys) {
    this.keys = keys;
    return this;
  }

  public GetListSchema addKeysItem(KeysEnum keysItem) {
    if (this.keys == null) {
      this.keys = new ArrayList<KeysEnum>();
    }
    this.keys.add(keysItem);
    return this;
  }

   /**
   * Get keys
   * @return keys
  **/
  @Schema(description = "")
  public List<KeysEnum> getKeys() {
    return keys;
  }

  public void setKeys(List<KeysEnum> keys) {
    this.keys = keys;
  }

  public GetListSchema orderColumn(String orderColumn) {
    this.orderColumn = orderColumn;
    return this;
  }

   /**
   * Get orderColumn
   * @return orderColumn
  **/
  @Schema(description = "")
  public String getOrderColumn() {
    return orderColumn;
  }

  public void setOrderColumn(String orderColumn) {
    this.orderColumn = orderColumn;
  }

  public GetListSchema orderDirection(OrderDirectionEnum orderDirection) {
    this.orderDirection = orderDirection;
    return this;
  }

   /**
   * Get orderDirection
   * @return orderDirection
  **/
  @Schema(description = "")
  public OrderDirectionEnum getOrderDirection() {
    return orderDirection;
  }

  public void setOrderDirection(OrderDirectionEnum orderDirection) {
    this.orderDirection = orderDirection;
  }

  public GetListSchema page(Integer page) {
    this.page = page;
    return this;
  }

   /**
   * Get page
   * @return page
  **/
  @Schema(description = "")
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }

  public GetListSchema pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * @return pageSize
  **/
  @Schema(description = "")
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetListSchema getListSchema = (GetListSchema) o;
    return Objects.equals(this.columns, getListSchema.columns) &&
        Objects.equals(this.filters, getListSchema.filters) &&
        Objects.equals(this.keys, getListSchema.keys) &&
        Objects.equals(this.orderColumn, getListSchema.orderColumn) &&
        Objects.equals(this.orderDirection, getListSchema.orderDirection) &&
        Objects.equals(this.page, getListSchema.page) &&
        Objects.equals(this.pageSize, getListSchema.pageSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columns, filters, keys, orderColumn, orderDirection, page, pageSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetListSchema {\n");
    
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    keys: ").append(toIndentedString(keys)).append("\n");
    sb.append("    orderColumn: ").append(toIndentedString(orderColumn)).append("\n");
    sb.append("    orderDirection: ").append(toIndentedString(orderDirection)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
