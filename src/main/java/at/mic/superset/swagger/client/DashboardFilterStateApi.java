/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client;

import at.mic.superset.swagger.ApiCallback;
import at.mic.superset.swagger.ApiClient;
import at.mic.superset.swagger.ApiException;
import at.mic.superset.swagger.ApiResponse;
import at.mic.superset.swagger.Configuration;
import at.mic.superset.swagger.Pair;
import at.mic.superset.swagger.ProgressRequestBody;
import at.mic.superset.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import at.mic.superset.swagger.client.model.InlineResponse20024;
import at.mic.superset.swagger.client.model.InlineResponse20025;
import at.mic.superset.swagger.client.model.InlineResponse2016;
import at.mic.superset.swagger.client.model.InlineResponse400;
import at.mic.superset.swagger.client.model.TemporaryCachePostSchema;
import at.mic.superset.swagger.client.model.TemporaryCachePutSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DashboardFilterStateApi {
    private ApiClient apiClient;

    public DashboardFilterStateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DashboardFilterStateApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiV1DashboardPkFilterStateKeyDelete
     * @param pk  (required)
     * @param key The value key. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1DashboardPkFilterStateKeyDeleteCall(Integer pk, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/dashboard/{pk}/filter_state/{key}"
            .replaceAll("\\{" + "pk" + "\\}", apiClient.escapeString(pk.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1DashboardPkFilterStateKeyDeleteValidateBeforeCall(Integer pk, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling apiV1DashboardPkFilterStateKeyDelete(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling apiV1DashboardPkFilterStateKeyDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1DashboardPkFilterStateKeyDeleteCall(pk, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Deletes a value.
     * @param pk  (required)
     * @param key The value key. (required)
     * @return InlineResponse20025
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20025 apiV1DashboardPkFilterStateKeyDelete(Integer pk, String key) throws ApiException {
        ApiResponse<InlineResponse20025> resp = apiV1DashboardPkFilterStateKeyDeleteWithHttpInfo(pk, key);
        return resp.getData();
    }

    /**
     * 
     * Deletes a value.
     * @param pk  (required)
     * @param key The value key. (required)
     * @return ApiResponse&lt;InlineResponse20025&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20025> apiV1DashboardPkFilterStateKeyDeleteWithHttpInfo(Integer pk, String key) throws ApiException {
        com.squareup.okhttp.Call call = apiV1DashboardPkFilterStateKeyDeleteValidateBeforeCall(pk, key, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20025>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a value.
     * @param pk  (required)
     * @param key The value key. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1DashboardPkFilterStateKeyDeleteAsync(Integer pk, String key, final ApiCallback<InlineResponse20025> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1DashboardPkFilterStateKeyDeleteValidateBeforeCall(pk, key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20025>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1DashboardPkFilterStateKeyGet
     * @param pk  (required)
     * @param key  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1DashboardPkFilterStateKeyGetCall(Integer pk, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/dashboard/{pk}/filter_state/{key}"
            .replaceAll("\\{" + "pk" + "\\}", apiClient.escapeString(pk.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1DashboardPkFilterStateKeyGetValidateBeforeCall(Integer pk, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling apiV1DashboardPkFilterStateKeyGet(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling apiV1DashboardPkFilterStateKeyGet(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1DashboardPkFilterStateKeyGetCall(pk, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrives a value.
     * @param pk  (required)
     * @param key  (required)
     * @return InlineResponse20024
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20024 apiV1DashboardPkFilterStateKeyGet(Integer pk, String key) throws ApiException {
        ApiResponse<InlineResponse20024> resp = apiV1DashboardPkFilterStateKeyGetWithHttpInfo(pk, key);
        return resp.getData();
    }

    /**
     * 
     * Retrives a value.
     * @param pk  (required)
     * @param key  (required)
     * @return ApiResponse&lt;InlineResponse20024&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20024> apiV1DashboardPkFilterStateKeyGetWithHttpInfo(Integer pk, String key) throws ApiException {
        com.squareup.okhttp.Call call = apiV1DashboardPkFilterStateKeyGetValidateBeforeCall(pk, key, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20024>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrives a value.
     * @param pk  (required)
     * @param key  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1DashboardPkFilterStateKeyGetAsync(Integer pk, String key, final ApiCallback<InlineResponse20024> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1DashboardPkFilterStateKeyGetValidateBeforeCall(pk, key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20024>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1DashboardPkFilterStateKeyPut
     * @param body  (required)
     * @param pk  (required)
     * @param key  (required)
     * @param tabId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1DashboardPkFilterStateKeyPutCall(TemporaryCachePutSchema body, Integer pk, String key, Integer tabId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/dashboard/{pk}/filter_state/{key}"
            .replaceAll("\\{" + "pk" + "\\}", apiClient.escapeString(pk.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tabId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tab_id", tabId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1DashboardPkFilterStateKeyPutValidateBeforeCall(TemporaryCachePutSchema body, Integer pk, String key, Integer tabId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiV1DashboardPkFilterStateKeyPut(Async)");
        }
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling apiV1DashboardPkFilterStateKeyPut(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling apiV1DashboardPkFilterStateKeyPut(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1DashboardPkFilterStateKeyPutCall(body, pk, key, tabId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Updates an existing value.
     * @param body  (required)
     * @param pk  (required)
     * @param key  (required)
     * @param tabId  (optional)
     * @return InlineResponse2016
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2016 apiV1DashboardPkFilterStateKeyPut(TemporaryCachePutSchema body, Integer pk, String key, Integer tabId) throws ApiException {
        ApiResponse<InlineResponse2016> resp = apiV1DashboardPkFilterStateKeyPutWithHttpInfo(body, pk, key, tabId);
        return resp.getData();
    }

    /**
     * 
     * Updates an existing value.
     * @param body  (required)
     * @param pk  (required)
     * @param key  (required)
     * @param tabId  (optional)
     * @return ApiResponse&lt;InlineResponse2016&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2016> apiV1DashboardPkFilterStateKeyPutWithHttpInfo(TemporaryCachePutSchema body, Integer pk, String key, Integer tabId) throws ApiException {
        com.squareup.okhttp.Call call = apiV1DashboardPkFilterStateKeyPutValidateBeforeCall(body, pk, key, tabId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2016>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing value.
     * @param body  (required)
     * @param pk  (required)
     * @param key  (required)
     * @param tabId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1DashboardPkFilterStateKeyPutAsync(TemporaryCachePutSchema body, Integer pk, String key, Integer tabId, final ApiCallback<InlineResponse2016> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1DashboardPkFilterStateKeyPutValidateBeforeCall(body, pk, key, tabId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2016>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1DashboardPkFilterStatePost
     * @param body  (required)
     * @param pk  (required)
     * @param tabId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1DashboardPkFilterStatePostCall(TemporaryCachePostSchema body, Integer pk, Integer tabId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/dashboard/{pk}/filter_state"
            .replaceAll("\\{" + "pk" + "\\}", apiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tabId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tab_id", tabId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1DashboardPkFilterStatePostValidateBeforeCall(TemporaryCachePostSchema body, Integer pk, Integer tabId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiV1DashboardPkFilterStatePost(Async)");
        }
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling apiV1DashboardPkFilterStatePost(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1DashboardPkFilterStatePostCall(body, pk, tabId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Stores a new value.
     * @param body  (required)
     * @param pk  (required)
     * @param tabId  (optional)
     * @return InlineResponse2016
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2016 apiV1DashboardPkFilterStatePost(TemporaryCachePostSchema body, Integer pk, Integer tabId) throws ApiException {
        ApiResponse<InlineResponse2016> resp = apiV1DashboardPkFilterStatePostWithHttpInfo(body, pk, tabId);
        return resp.getData();
    }

    /**
     * 
     * Stores a new value.
     * @param body  (required)
     * @param pk  (required)
     * @param tabId  (optional)
     * @return ApiResponse&lt;InlineResponse2016&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2016> apiV1DashboardPkFilterStatePostWithHttpInfo(TemporaryCachePostSchema body, Integer pk, Integer tabId) throws ApiException {
        com.squareup.okhttp.Call call = apiV1DashboardPkFilterStatePostValidateBeforeCall(body, pk, tabId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2016>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Stores a new value.
     * @param body  (required)
     * @param pk  (required)
     * @param tabId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1DashboardPkFilterStatePostAsync(TemporaryCachePostSchema body, Integer pk, Integer tabId, final ApiCallback<InlineResponse2016> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1DashboardPkFilterStatePostValidateBeforeCall(body, pk, tabId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2016>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
