/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import at.mic.superset.swagger.client.model.ChartDataDatasource;
import at.mic.superset.swagger.client.model.ChartDataQueryObject;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ChartDataQueryContextSchema
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-06T17:36:10.263+01:00[Europe/Vienna]")
public class ChartDataQueryContextSchema {
  @SerializedName("datasource")
  private ChartDataDatasource datasource = null;

  @SerializedName("force")
  private Boolean force = null;

  @SerializedName("queries")
  private List<ChartDataQueryObject> queries = null;

  /**
   * Format of result payload
   */
  @JsonAdapter(ResultFormatEnum.Adapter.class)
  public enum ResultFormatEnum {
    JSON("json"),
    CSV("csv");

    private String value;

    ResultFormatEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ResultFormatEnum fromValue(String text) {
      for (ResultFormatEnum b : ResultFormatEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ResultFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResultFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResultFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ResultFormatEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("result_format")
  private ResultFormatEnum resultFormat = null;

  /**
   * Type of results to return
   */
  @JsonAdapter(ResultTypeEnum.Adapter.class)
  public enum ResultTypeEnum {
    FULL("full"),
    QUERY("query"),
    RESULTS("results"),
    SAMPLES("samples");

    private String value;

    ResultTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ResultTypeEnum fromValue(String text) {
      for (ResultTypeEnum b : ResultTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ResultTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResultTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResultTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ResultTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("result_type")
  private ResultTypeEnum resultType = null;

  public ChartDataQueryContextSchema datasource(ChartDataDatasource datasource) {
    this.datasource = datasource;
    return this;
  }

   /**
   * Get datasource
   * @return datasource
  **/
  @Schema(description = "")
  public ChartDataDatasource getDatasource() {
    return datasource;
  }

  public void setDatasource(ChartDataDatasource datasource) {
    this.datasource = datasource;
  }

  public ChartDataQueryContextSchema force(Boolean force) {
    this.force = force;
    return this;
  }

   /**
   * Should the queries be forced to load from the source. Default: &#x60;false&#x60;
   * @return force
  **/
  @Schema(description = "Should the queries be forced to load from the source. Default: `false`")
  public Boolean isForce() {
    return force;
  }

  public void setForce(Boolean force) {
    this.force = force;
  }

  public ChartDataQueryContextSchema queries(List<ChartDataQueryObject> queries) {
    this.queries = queries;
    return this;
  }

  public ChartDataQueryContextSchema addQueriesItem(ChartDataQueryObject queriesItem) {
    if (this.queries == null) {
      this.queries = new ArrayList<ChartDataQueryObject>();
    }
    this.queries.add(queriesItem);
    return this;
  }

   /**
   * Get queries
   * @return queries
  **/
  @Schema(description = "")
  public List<ChartDataQueryObject> getQueries() {
    return queries;
  }

  public void setQueries(List<ChartDataQueryObject> queries) {
    this.queries = queries;
  }

  public ChartDataQueryContextSchema resultFormat(ResultFormatEnum resultFormat) {
    this.resultFormat = resultFormat;
    return this;
  }

   /**
   * Format of result payload
   * @return resultFormat
  **/
  @Schema(description = "Format of result payload")
  public ResultFormatEnum getResultFormat() {
    return resultFormat;
  }

  public void setResultFormat(ResultFormatEnum resultFormat) {
    this.resultFormat = resultFormat;
  }

  public ChartDataQueryContextSchema resultType(ResultTypeEnum resultType) {
    this.resultType = resultType;
    return this;
  }

   /**
   * Type of results to return
   * @return resultType
  **/
  @Schema(description = "Type of results to return")
  public ResultTypeEnum getResultType() {
    return resultType;
  }

  public void setResultType(ResultTypeEnum resultType) {
    this.resultType = resultType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartDataQueryContextSchema chartDataQueryContextSchema = (ChartDataQueryContextSchema) o;
    return Objects.equals(this.datasource, chartDataQueryContextSchema.datasource) &&
        Objects.equals(this.force, chartDataQueryContextSchema.force) &&
        Objects.equals(this.queries, chartDataQueryContextSchema.queries) &&
        Objects.equals(this.resultFormat, chartDataQueryContextSchema.resultFormat) &&
        Objects.equals(this.resultType, chartDataQueryContextSchema.resultType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datasource, force, queries, resultFormat, resultType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartDataQueryContextSchema {\n");
    
    sb.append("    datasource: ").append(toIndentedString(datasource)).append("\n");
    sb.append("    force: ").append(toIndentedString(force)).append("\n");
    sb.append("    queries: ").append(toIndentedString(queries)).append("\n");
    sb.append("    resultFormat: ").append(toIndentedString(resultFormat)).append("\n");
    sb.append("    resultType: ").append(toIndentedString(resultType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
