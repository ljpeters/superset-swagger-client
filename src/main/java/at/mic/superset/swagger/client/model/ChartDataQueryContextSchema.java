/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import at.mic.superset.swagger.client.model.ChartDataDatasource;
import at.mic.superset.swagger.client.model.ChartDataQueryObject;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ChartDataQueryContextSchema
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-08-29T14:48:42.974+02:00[Europe/Berlin]")
public class ChartDataQueryContextSchema {
  @SerializedName("datasource")
  private ChartDataDatasource datasource = null;

  @SerializedName("force")
  private Boolean force = null;

  @SerializedName("form_data")
  private Object formData = null;

  @SerializedName("queries")
  private List<ChartDataQueryObject> queries = null;

  @SerializedName("result_format")
  private Object resultFormat = null;

  @SerializedName("result_type")
  private Object resultType = null;

  public ChartDataQueryContextSchema datasource(ChartDataDatasource datasource) {
    this.datasource = datasource;
    return this;
  }

   /**
   * Get datasource
   * @return datasource
  **/
  @Schema(description = "")
  public ChartDataDatasource getDatasource() {
    return datasource;
  }

  public void setDatasource(ChartDataDatasource datasource) {
    this.datasource = datasource;
  }

  public ChartDataQueryContextSchema force(Boolean force) {
    this.force = force;
    return this;
  }

   /**
   * Should the queries be forced to load from the source. Default: &#x60;false&#x60;
   * @return force
  **/
  @Schema(description = "Should the queries be forced to load from the source. Default: `false`")
  public Boolean isForce() {
    return force;
  }

  public void setForce(Boolean force) {
    this.force = force;
  }

  public ChartDataQueryContextSchema formData(Object formData) {
    this.formData = formData;
    return this;
  }

   /**
   * Get formData
   * @return formData
  **/
  @Schema(description = "")
  public Object getFormData() {
    return formData;
  }

  public void setFormData(Object formData) {
    this.formData = formData;
  }

  public ChartDataQueryContextSchema queries(List<ChartDataQueryObject> queries) {
    this.queries = queries;
    return this;
  }

  public ChartDataQueryContextSchema addQueriesItem(ChartDataQueryObject queriesItem) {
    if (this.queries == null) {
      this.queries = new ArrayList<ChartDataQueryObject>();
    }
    this.queries.add(queriesItem);
    return this;
  }

   /**
   * Get queries
   * @return queries
  **/
  @Schema(description = "")
  public List<ChartDataQueryObject> getQueries() {
    return queries;
  }

  public void setQueries(List<ChartDataQueryObject> queries) {
    this.queries = queries;
  }

  public ChartDataQueryContextSchema resultFormat(Object resultFormat) {
    this.resultFormat = resultFormat;
    return this;
  }

   /**
   * Get resultFormat
   * @return resultFormat
  **/
  @Schema(description = "")
  public Object getResultFormat() {
    return resultFormat;
  }

  public void setResultFormat(Object resultFormat) {
    this.resultFormat = resultFormat;
  }

  public ChartDataQueryContextSchema resultType(Object resultType) {
    this.resultType = resultType;
    return this;
  }

   /**
   * Get resultType
   * @return resultType
  **/
  @Schema(description = "")
  public Object getResultType() {
    return resultType;
  }

  public void setResultType(Object resultType) {
    this.resultType = resultType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartDataQueryContextSchema chartDataQueryContextSchema = (ChartDataQueryContextSchema) o;
    return Objects.equals(this.datasource, chartDataQueryContextSchema.datasource) &&
        Objects.equals(this.force, chartDataQueryContextSchema.force) &&
        Objects.equals(this.formData, chartDataQueryContextSchema.formData) &&
        Objects.equals(this.queries, chartDataQueryContextSchema.queries) &&
        Objects.equals(this.resultFormat, chartDataQueryContextSchema.resultFormat) &&
        Objects.equals(this.resultType, chartDataQueryContextSchema.resultType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datasource, force, formData, queries, resultFormat, resultType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartDataQueryContextSchema {\n");
    
    sb.append("    datasource: ").append(toIndentedString(datasource)).append("\n");
    sb.append("    force: ").append(toIndentedString(force)).append("\n");
    sb.append("    formData: ").append(toIndentedString(formData)).append("\n");
    sb.append("    queries: ").append(toIndentedString(queries)).append("\n");
    sb.append("    resultFormat: ").append(toIndentedString(resultFormat)).append("\n");
    sb.append("    resultType: ").append(toIndentedString(resultType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
