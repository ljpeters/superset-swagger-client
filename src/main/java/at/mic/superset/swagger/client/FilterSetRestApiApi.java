/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client;

import at.mic.superset.swagger.ApiCallback;
import at.mic.superset.swagger.ApiClient;
import at.mic.superset.swagger.ApiException;
import at.mic.superset.swagger.ApiResponse;
import at.mic.superset.swagger.Configuration;
import at.mic.superset.swagger.Pair;
import at.mic.superset.swagger.ProgressRequestBody;
import at.mic.superset.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import at.mic.superset.swagger.client.model.FilterSetRestApiPost;
import at.mic.superset.swagger.client.model.FilterSetRestApiPut;
import at.mic.superset.swagger.client.model.InlineResponse20017;
import at.mic.superset.swagger.client.model.InlineResponse20018;
import at.mic.superset.swagger.client.model.InlineResponse2015;
import at.mic.superset.swagger.client.model.InlineResponse400;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FilterSetRestApiApi {
    private ApiClient apiClient;

    public FilterSetRestApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FilterSetRestApiApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiV1DashboardDashboardIdFiltersetsGet
     * @param dashboardId The id of the dashboard (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1DashboardDashboardIdFiltersetsGetCall(Integer dashboardId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/dashboard/{dashboard_id}/filtersets"
            .replaceAll("\\{" + "dashboard_id" + "\\}", apiClient.escapeString(dashboardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1DashboardDashboardIdFiltersetsGetValidateBeforeCall(Integer dashboardId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling apiV1DashboardDashboardIdFiltersetsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1DashboardDashboardIdFiltersetsGetCall(dashboardId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get a dashboard&#x27;s list of filter sets
     * @param dashboardId The id of the dashboard (required)
     * @return List&lt;InlineResponse20017&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse20017> apiV1DashboardDashboardIdFiltersetsGet(Integer dashboardId) throws ApiException {
        ApiResponse<List<InlineResponse20017>> resp = apiV1DashboardDashboardIdFiltersetsGetWithHttpInfo(dashboardId);
        return resp.getData();
    }

    /**
     * 
     * Get a dashboard&#x27;s list of filter sets
     * @param dashboardId The id of the dashboard (required)
     * @return ApiResponse&lt;List&lt;InlineResponse20017&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse20017>> apiV1DashboardDashboardIdFiltersetsGetWithHttpInfo(Integer dashboardId) throws ApiException {
        com.squareup.okhttp.Call call = apiV1DashboardDashboardIdFiltersetsGetValidateBeforeCall(dashboardId, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse20017>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a dashboard&#x27;s list of filter sets
     * @param dashboardId The id of the dashboard (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1DashboardDashboardIdFiltersetsGetAsync(Integer dashboardId, final ApiCallback<List<InlineResponse20017>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1DashboardDashboardIdFiltersetsGetValidateBeforeCall(dashboardId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse20017>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1DashboardDashboardIdFiltersetsPkDelete
     * @param dashboardId  (required)
     * @param pk  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1DashboardDashboardIdFiltersetsPkDeleteCall(Integer dashboardId, Integer pk, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/dashboard/{dashboard_id}/filtersets/{pk}"
            .replaceAll("\\{" + "dashboard_id" + "\\}", apiClient.escapeString(dashboardId.toString()))
            .replaceAll("\\{" + "pk" + "\\}", apiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1DashboardDashboardIdFiltersetsPkDeleteValidateBeforeCall(Integer dashboardId, Integer pk, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling apiV1DashboardDashboardIdFiltersetsPkDelete(Async)");
        }
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling apiV1DashboardDashboardIdFiltersetsPkDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1DashboardDashboardIdFiltersetsPkDeleteCall(dashboardId, pk, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Deletes a Dashboard.
     * @param dashboardId  (required)
     * @param pk  (required)
     * @return InlineResponse400
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse400 apiV1DashboardDashboardIdFiltersetsPkDelete(Integer dashboardId, Integer pk) throws ApiException {
        ApiResponse<InlineResponse400> resp = apiV1DashboardDashboardIdFiltersetsPkDeleteWithHttpInfo(dashboardId, pk);
        return resp.getData();
    }

    /**
     * 
     * Deletes a Dashboard.
     * @param dashboardId  (required)
     * @param pk  (required)
     * @return ApiResponse&lt;InlineResponse400&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse400> apiV1DashboardDashboardIdFiltersetsPkDeleteWithHttpInfo(Integer dashboardId, Integer pk) throws ApiException {
        com.squareup.okhttp.Call call = apiV1DashboardDashboardIdFiltersetsPkDeleteValidateBeforeCall(dashboardId, pk, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse400>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a Dashboard.
     * @param dashboardId  (required)
     * @param pk  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1DashboardDashboardIdFiltersetsPkDeleteAsync(Integer dashboardId, Integer pk, final ApiCallback<InlineResponse400> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1DashboardDashboardIdFiltersetsPkDeleteValidateBeforeCall(dashboardId, pk, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse400>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1DashboardDashboardIdFiltersetsPkPut
     * @param body Filter set schema (required)
     * @param dashboardId  (required)
     * @param pk  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1DashboardDashboardIdFiltersetsPkPutCall(FilterSetRestApiPut body, Integer dashboardId, Integer pk, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/dashboard/{dashboard_id}/filtersets/{pk}"
            .replaceAll("\\{" + "dashboard_id" + "\\}", apiClient.escapeString(dashboardId.toString()))
            .replaceAll("\\{" + "pk" + "\\}", apiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1DashboardDashboardIdFiltersetsPkPutValidateBeforeCall(FilterSetRestApiPut body, Integer dashboardId, Integer pk, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiV1DashboardDashboardIdFiltersetsPkPut(Async)");
        }
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling apiV1DashboardDashboardIdFiltersetsPkPut(Async)");
        }
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling apiV1DashboardDashboardIdFiltersetsPkPut(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1DashboardDashboardIdFiltersetsPkPutCall(body, dashboardId, pk, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Changes a Dashboard&#x27;s Filter set.
     * @param body Filter set schema (required)
     * @param dashboardId  (required)
     * @param pk  (required)
     * @return InlineResponse20018
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20018 apiV1DashboardDashboardIdFiltersetsPkPut(FilterSetRestApiPut body, Integer dashboardId, Integer pk) throws ApiException {
        ApiResponse<InlineResponse20018> resp = apiV1DashboardDashboardIdFiltersetsPkPutWithHttpInfo(body, dashboardId, pk);
        return resp.getData();
    }

    /**
     * 
     * Changes a Dashboard&#x27;s Filter set.
     * @param body Filter set schema (required)
     * @param dashboardId  (required)
     * @param pk  (required)
     * @return ApiResponse&lt;InlineResponse20018&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20018> apiV1DashboardDashboardIdFiltersetsPkPutWithHttpInfo(FilterSetRestApiPut body, Integer dashboardId, Integer pk) throws ApiException {
        com.squareup.okhttp.Call call = apiV1DashboardDashboardIdFiltersetsPkPutValidateBeforeCall(body, dashboardId, pk, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20018>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Changes a Dashboard&#x27;s Filter set.
     * @param body Filter set schema (required)
     * @param dashboardId  (required)
     * @param pk  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1DashboardDashboardIdFiltersetsPkPutAsync(FilterSetRestApiPut body, Integer dashboardId, Integer pk, final ApiCallback<InlineResponse20018> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1DashboardDashboardIdFiltersetsPkPutValidateBeforeCall(body, dashboardId, pk, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20018>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1DashboardDashboardIdFiltersetsPost
     * @param body Filter set schema (required)
     * @param dashboardId The id of the dashboard (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1DashboardDashboardIdFiltersetsPostCall(FilterSetRestApiPost body, Integer dashboardId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/dashboard/{dashboard_id}/filtersets"
            .replaceAll("\\{" + "dashboard_id" + "\\}", apiClient.escapeString(dashboardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1DashboardDashboardIdFiltersetsPostValidateBeforeCall(FilterSetRestApiPost body, Integer dashboardId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiV1DashboardDashboardIdFiltersetsPost(Async)");
        }
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling apiV1DashboardDashboardIdFiltersetsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1DashboardDashboardIdFiltersetsPostCall(body, dashboardId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create a new Dashboard&#x27;s Filter Set.
     * @param body Filter set schema (required)
     * @param dashboardId The id of the dashboard (required)
     * @return InlineResponse2015
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2015 apiV1DashboardDashboardIdFiltersetsPost(FilterSetRestApiPost body, Integer dashboardId) throws ApiException {
        ApiResponse<InlineResponse2015> resp = apiV1DashboardDashboardIdFiltersetsPostWithHttpInfo(body, dashboardId);
        return resp.getData();
    }

    /**
     * 
     * Create a new Dashboard&#x27;s Filter Set.
     * @param body Filter set schema (required)
     * @param dashboardId The id of the dashboard (required)
     * @return ApiResponse&lt;InlineResponse2015&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2015> apiV1DashboardDashboardIdFiltersetsPostWithHttpInfo(FilterSetRestApiPost body, Integer dashboardId) throws ApiException {
        com.squareup.okhttp.Call call = apiV1DashboardDashboardIdFiltersetsPostValidateBeforeCall(body, dashboardId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2015>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Dashboard&#x27;s Filter Set.
     * @param body Filter set schema (required)
     * @param dashboardId The id of the dashboard (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1DashboardDashboardIdFiltersetsPostAsync(FilterSetRestApiPost body, Integer dashboardId, final ApiCallback<InlineResponse2015> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1DashboardDashboardIdFiltersetsPostValidateBeforeCall(body, dashboardId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2015>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
