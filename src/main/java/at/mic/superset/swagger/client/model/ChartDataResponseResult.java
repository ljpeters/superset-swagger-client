/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ChartDataResponseResult
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-06T17:36:10.263+01:00[Europe/Vienna]")
public class ChartDataResponseResult {
  @SerializedName("cache_key")
  private String cacheKey = null;

  @SerializedName("cache_timeout")
  private Integer cacheTimeout = null;

  @SerializedName("cached_dttm")
  private String cachedDttm = null;

  @SerializedName("data")
  private List<Object> data = null;

  @SerializedName("error")
  private String error = null;

  @SerializedName("is_cached")
  private Boolean isCached = null;

  @SerializedName("query")
  private String query = null;

  @SerializedName("rowcount")
  private Integer rowcount = null;

  @SerializedName("stacktrace")
  private String stacktrace = null;

  /**
   * Status of the query
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    STOPPED("stopped"),
    FAILED("failed"),
    PENDING("pending"),
    RUNNING("running"),
    SCHEDULED("scheduled"),
    SUCCESS("success"),
    TIMED_OUT("timed_out");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  public ChartDataResponseResult cacheKey(String cacheKey) {
    this.cacheKey = cacheKey;
    return this;
  }

   /**
   * Unique cache key for query object
   * @return cacheKey
  **/
  @Schema(required = true, description = "Unique cache key for query object")
  public String getCacheKey() {
    return cacheKey;
  }

  public void setCacheKey(String cacheKey) {
    this.cacheKey = cacheKey;
  }

  public ChartDataResponseResult cacheTimeout(Integer cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
    return this;
  }

   /**
   * Cache timeout in following order: custom timeout, datasource timeout, default config timeout.
   * @return cacheTimeout
  **/
  @Schema(required = true, description = "Cache timeout in following order: custom timeout, datasource timeout, default config timeout.")
  public Integer getCacheTimeout() {
    return cacheTimeout;
  }

  public void setCacheTimeout(Integer cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
  }

  public ChartDataResponseResult cachedDttm(String cachedDttm) {
    this.cachedDttm = cachedDttm;
    return this;
  }

   /**
   * Cache timestamp
   * @return cachedDttm
  **/
  @Schema(required = true, description = "Cache timestamp")
  public String getCachedDttm() {
    return cachedDttm;
  }

  public void setCachedDttm(String cachedDttm) {
    this.cachedDttm = cachedDttm;
  }

  public ChartDataResponseResult data(List<Object> data) {
    this.data = data;
    return this;
  }

  public ChartDataResponseResult addDataItem(Object dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<Object>();
    }
    this.data.add(dataItem);
    return this;
  }

   /**
   * A list with results
   * @return data
  **/
  @Schema(description = "A list with results")
  public List<Object> getData() {
    return data;
  }

  public void setData(List<Object> data) {
    this.data = data;
  }

  public ChartDataResponseResult error(String error) {
    this.error = error;
    return this;
  }

   /**
   * Error
   * @return error
  **/
  @Schema(description = "Error")
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }

  public ChartDataResponseResult isCached(Boolean isCached) {
    this.isCached = isCached;
    return this;
  }

   /**
   * Is the result cached
   * @return isCached
  **/
  @Schema(required = true, description = "Is the result cached")
  public Boolean isIsCached() {
    return isCached;
  }

  public void setIsCached(Boolean isCached) {
    this.isCached = isCached;
  }

  public ChartDataResponseResult query(String query) {
    this.query = query;
    return this;
  }

   /**
   * The executed query statement
   * @return query
  **/
  @Schema(required = true, description = "The executed query statement")
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }

  public ChartDataResponseResult rowcount(Integer rowcount) {
    this.rowcount = rowcount;
    return this;
  }

   /**
   * Amount of rows in result set
   * @return rowcount
  **/
  @Schema(description = "Amount of rows in result set")
  public Integer getRowcount() {
    return rowcount;
  }

  public void setRowcount(Integer rowcount) {
    this.rowcount = rowcount;
  }

  public ChartDataResponseResult stacktrace(String stacktrace) {
    this.stacktrace = stacktrace;
    return this;
  }

   /**
   * Get stacktrace
   * @return stacktrace
  **/
  @Schema(description = "")
  public String getStacktrace() {
    return stacktrace;
  }

  public void setStacktrace(String stacktrace) {
    this.stacktrace = stacktrace;
  }

  public ChartDataResponseResult status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Status of the query
   * @return status
  **/
  @Schema(description = "Status of the query")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartDataResponseResult chartDataResponseResult = (ChartDataResponseResult) o;
    return Objects.equals(this.cacheKey, chartDataResponseResult.cacheKey) &&
        Objects.equals(this.cacheTimeout, chartDataResponseResult.cacheTimeout) &&
        Objects.equals(this.cachedDttm, chartDataResponseResult.cachedDttm) &&
        Objects.equals(this.data, chartDataResponseResult.data) &&
        Objects.equals(this.error, chartDataResponseResult.error) &&
        Objects.equals(this.isCached, chartDataResponseResult.isCached) &&
        Objects.equals(this.query, chartDataResponseResult.query) &&
        Objects.equals(this.rowcount, chartDataResponseResult.rowcount) &&
        Objects.equals(this.stacktrace, chartDataResponseResult.stacktrace) &&
        Objects.equals(this.status, chartDataResponseResult.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheKey, cacheTimeout, cachedDttm, data, error, isCached, query, rowcount, stacktrace, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartDataResponseResult {\n");
    
    sb.append("    cacheKey: ").append(toIndentedString(cacheKey)).append("\n");
    sb.append("    cacheTimeout: ").append(toIndentedString(cacheTimeout)).append("\n");
    sb.append("    cachedDttm: ").append(toIndentedString(cachedDttm)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    isCached: ").append(toIndentedString(isCached)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    rowcount: ").append(toIndentedString(rowcount)).append("\n");
    sb.append("    stacktrace: ").append(toIndentedString(stacktrace)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
