/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ChartDataBoxplotOptionsSchema
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-08-29T14:48:42.974+02:00[Europe/Berlin]")
public class ChartDataBoxplotOptionsSchema {
  @SerializedName("groupby")
  private List<String> groupby = null;

  @SerializedName("metrics")
  private List<Object> metrics = null;

  @SerializedName("percentiles")
  private Object percentiles = null;

  /**
   * Whisker type. Any numpy function will work.
   */
  @JsonAdapter(WhiskerTypeEnum.Adapter.class)
  public enum WhiskerTypeEnum {
    TUKEY("tukey"),
    MIN_MAX("min/max"),
    PERCENTILE("percentile");

    private String value;

    WhiskerTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static WhiskerTypeEnum fromValue(String input) {
      for (WhiskerTypeEnum b : WhiskerTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<WhiskerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WhiskerTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public WhiskerTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return WhiskerTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("whisker_type")
  private WhiskerTypeEnum whiskerType = null;

  public ChartDataBoxplotOptionsSchema groupby(List<String> groupby) {
    this.groupby = groupby;
    return this;
  }

  public ChartDataBoxplotOptionsSchema addGroupbyItem(String groupbyItem) {
    if (this.groupby == null) {
      this.groupby = new ArrayList<String>();
    }
    this.groupby.add(groupbyItem);
    return this;
  }

   /**
   * Get groupby
   * @return groupby
  **/
  @Schema(description = "")
  public List<String> getGroupby() {
    return groupby;
  }

  public void setGroupby(List<String> groupby) {
    this.groupby = groupby;
  }

  public ChartDataBoxplotOptionsSchema metrics(List<Object> metrics) {
    this.metrics = metrics;
    return this;
  }

  public ChartDataBoxplotOptionsSchema addMetricsItem(Object metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<Object>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

   /**
   * Aggregate expressions. Metrics can be passed as both references to datasource metrics (strings), or ad-hoc metricswhich are defined only within the query object. See &#x60;ChartDataAdhocMetricSchema&#x60; for the structure of ad-hoc metrics. When metrics is undefined or null, the query is executed without a groupby. However, when metrics is an array (length &gt;&#x3D; 0), a groupby clause is added to the query.
   * @return metrics
  **/
  @Schema(description = "Aggregate expressions. Metrics can be passed as both references to datasource metrics (strings), or ad-hoc metricswhich are defined only within the query object. See `ChartDataAdhocMetricSchema` for the structure of ad-hoc metrics. When metrics is undefined or null, the query is executed without a groupby. However, when metrics is an array (length >= 0), a groupby clause is added to the query.")
  public List<Object> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<Object> metrics) {
    this.metrics = metrics;
  }

  public ChartDataBoxplotOptionsSchema percentiles(Object percentiles) {
    this.percentiles = percentiles;
    return this;
  }

   /**
   * Upper and lower percentiles for percentile whisker type.
   * @return percentiles
  **/
  @Schema(example = "[1,99]", description = "Upper and lower percentiles for percentile whisker type.")
  public Object getPercentiles() {
    return percentiles;
  }

  public void setPercentiles(Object percentiles) {
    this.percentiles = percentiles;
  }

  public ChartDataBoxplotOptionsSchema whiskerType(WhiskerTypeEnum whiskerType) {
    this.whiskerType = whiskerType;
    return this;
  }

   /**
   * Whisker type. Any numpy function will work.
   * @return whiskerType
  **/
  @Schema(example = "tukey", required = true, description = "Whisker type. Any numpy function will work.")
  public WhiskerTypeEnum getWhiskerType() {
    return whiskerType;
  }

  public void setWhiskerType(WhiskerTypeEnum whiskerType) {
    this.whiskerType = whiskerType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartDataBoxplotOptionsSchema chartDataBoxplotOptionsSchema = (ChartDataBoxplotOptionsSchema) o;
    return Objects.equals(this.groupby, chartDataBoxplotOptionsSchema.groupby) &&
        Objects.equals(this.metrics, chartDataBoxplotOptionsSchema.metrics) &&
        Objects.equals(this.percentiles, chartDataBoxplotOptionsSchema.percentiles) &&
        Objects.equals(this.whiskerType, chartDataBoxplotOptionsSchema.whiskerType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupby, metrics, percentiles, whiskerType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartDataBoxplotOptionsSchema {\n");
    
    sb.append("    groupby: ").append(toIndentedString(groupby)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    percentiles: ").append(toIndentedString(percentiles)).append("\n");
    sb.append("    whiskerType: ").append(toIndentedString(whiskerType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
