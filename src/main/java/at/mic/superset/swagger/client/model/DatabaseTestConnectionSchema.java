/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * DatabaseTestConnectionSchema
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-08-29T14:48:42.974+02:00[Europe/Berlin]")
public class DatabaseTestConnectionSchema {
  @SerializedName("configuration_method")
  private Object configurationMethod = null;

  @SerializedName("database_name")
  private String databaseName = null;

  @SerializedName("encrypted_extra")
  private String encryptedExtra = null;

  @SerializedName("engine")
  private String engine = null;

  @SerializedName("extra")
  private String extra = null;

  @SerializedName("impersonate_user")
  private Boolean impersonateUser = null;

  @SerializedName("parameters")
  private Map<String, Object> parameters = null;

  @SerializedName("server_cert")
  private String serverCert = null;

  @SerializedName("sqlalchemy_uri")
  private String sqlalchemyUri = null;

  public DatabaseTestConnectionSchema configurationMethod(Object configurationMethod) {
    this.configurationMethod = configurationMethod;
    return this;
  }

   /**
   * Configuration_method is used on the frontend to inform the backend whether to explode parameters or to provide only a sqlalchemy_uri.
   * @return configurationMethod
  **/
  @Schema(description = "Configuration_method is used on the frontend to inform the backend whether to explode parameters or to provide only a sqlalchemy_uri.")
  public Object getConfigurationMethod() {
    return configurationMethod;
  }

  public void setConfigurationMethod(Object configurationMethod) {
    this.configurationMethod = configurationMethod;
  }

  public DatabaseTestConnectionSchema databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

   /**
   * A database name to identify this connection.
   * @return databaseName
  **/
  @Schema(description = "A database name to identify this connection.")
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }

  public DatabaseTestConnectionSchema encryptedExtra(String encryptedExtra) {
    this.encryptedExtra = encryptedExtra;
    return this;
  }

   /**
   * &lt;p&gt;JSON string containing additional connection configuration.&lt;br&gt;This is used to provide connection information for systems like Hive, Presto, and BigQuery, which do not conform to the username:password syntax normally used by SQLAlchemy.&lt;/p&gt;
   * @return encryptedExtra
  **/
  @Schema(description = "<p>JSON string containing additional connection configuration.<br>This is used to provide connection information for systems like Hive, Presto, and BigQuery, which do not conform to the username:password syntax normally used by SQLAlchemy.</p>")
  public String getEncryptedExtra() {
    return encryptedExtra;
  }

  public void setEncryptedExtra(String encryptedExtra) {
    this.encryptedExtra = encryptedExtra;
  }

  public DatabaseTestConnectionSchema engine(String engine) {
    this.engine = engine;
    return this;
  }

   /**
   * SQLAlchemy engine to use
   * @return engine
  **/
  @Schema(description = "SQLAlchemy engine to use")
  public String getEngine() {
    return engine;
  }

  public void setEngine(String engine) {
    this.engine = engine;
  }

  public DatabaseTestConnectionSchema extra(String extra) {
    this.extra = extra;
    return this;
  }

   /**
   * &lt;p&gt;JSON string containing extra configuration elements.&lt;br&gt;1. The &lt;code&gt;engine_params&lt;/code&gt; object gets unpacked into the &lt;a href&#x3D;\&quot;https://docs.sqlalchemy.org/en/latest/core/engines.html#sqlalchemy.create_engine\&quot;&gt;sqlalchemy.create_engine&lt;/a&gt; call, while the &lt;code&gt;metadata_params&lt;/code&gt; gets unpacked into the &lt;a href&#x3D;\&quot;https://docs.sqlalchemy.org/en/rel_1_0/core/metadata.html#sqlalchemy.schema.MetaData\&quot;&gt;sqlalchemy.MetaData&lt;/a&gt; call.&lt;br&gt;2. The &lt;code&gt;metadata_cache_timeout&lt;/code&gt; is a cache timeout setting in seconds for metadata fetch of this database. Specify it as &lt;strong&gt;\&quot;metadata_cache_timeout\&quot;: {\&quot;schema_cache_timeout\&quot;: 600, \&quot;table_cache_timeout\&quot;: 600}&lt;/strong&gt;. If unset, cache will not be enabled for the functionality. A timeout of 0 indicates that the cache never expires.&lt;br&gt;3. The &lt;code&gt;schemas_allowed_for_file_upload&lt;/code&gt; is a comma separated list of schemas that CSVs are allowed to upload to. Specify it as &lt;strong&gt;\&quot;schemas_allowed_for_file_upload\&quot;: [\&quot;public\&quot;, \&quot;csv_upload\&quot;]&lt;/strong&gt;. If database flavor does not support schema or any schema is allowed to be accessed, just leave the list empty&lt;br&gt;4. The &lt;code&gt;version&lt;/code&gt; field is a string specifying the this db&#x27;s version. This should be used with Presto DBs so that the syntax is correct&lt;br&gt;5. The &lt;code&gt;allows_virtual_table_explore&lt;/code&gt; field is a boolean specifying whether or not the Explore button in SQL Lab results is shown.&lt;br&gt;6. The &lt;code&gt;disable_data_preview&lt;/code&gt; field is a boolean specifying whether or not data preview queries will be run when fetching table metadata in SQL Lab.&lt;/p&gt;
   * @return extra
  **/
  @Schema(description = "<p>JSON string containing extra configuration elements.<br>1. The <code>engine_params</code> object gets unpacked into the <a href=\"https://docs.sqlalchemy.org/en/latest/core/engines.html#sqlalchemy.create_engine\">sqlalchemy.create_engine</a> call, while the <code>metadata_params</code> gets unpacked into the <a href=\"https://docs.sqlalchemy.org/en/rel_1_0/core/metadata.html#sqlalchemy.schema.MetaData\">sqlalchemy.MetaData</a> call.<br>2. The <code>metadata_cache_timeout</code> is a cache timeout setting in seconds for metadata fetch of this database. Specify it as <strong>\"metadata_cache_timeout\": {\"schema_cache_timeout\": 600, \"table_cache_timeout\": 600}</strong>. If unset, cache will not be enabled for the functionality. A timeout of 0 indicates that the cache never expires.<br>3. The <code>schemas_allowed_for_file_upload</code> is a comma separated list of schemas that CSVs are allowed to upload to. Specify it as <strong>\"schemas_allowed_for_file_upload\": [\"public\", \"csv_upload\"]</strong>. If database flavor does not support schema or any schema is allowed to be accessed, just leave the list empty<br>4. The <code>version</code> field is a string specifying the this db's version. This should be used with Presto DBs so that the syntax is correct<br>5. The <code>allows_virtual_table_explore</code> field is a boolean specifying whether or not the Explore button in SQL Lab results is shown.<br>6. The <code>disable_data_preview</code> field is a boolean specifying whether or not data preview queries will be run when fetching table metadata in SQL Lab.</p>")
  public String getExtra() {
    return extra;
  }

  public void setExtra(String extra) {
    this.extra = extra;
  }

  public DatabaseTestConnectionSchema impersonateUser(Boolean impersonateUser) {
    this.impersonateUser = impersonateUser;
    return this;
  }

   /**
   * If Presto, all the queries in SQL Lab are going to be executed as the currently logged on user who must have permission to run them.&lt;br/&gt;If Hive and hive.server2.enable.doAs is enabled, will run the queries as service account, but impersonate the currently logged on user via hive.server2.proxy.user property.
   * @return impersonateUser
  **/
  @Schema(description = "If Presto, all the queries in SQL Lab are going to be executed as the currently logged on user who must have permission to run them.<br/>If Hive and hive.server2.enable.doAs is enabled, will run the queries as service account, but impersonate the currently logged on user via hive.server2.proxy.user property.")
  public Boolean isImpersonateUser() {
    return impersonateUser;
  }

  public void setImpersonateUser(Boolean impersonateUser) {
    this.impersonateUser = impersonateUser;
  }

  public DatabaseTestConnectionSchema parameters(Map<String, Object> parameters) {
    this.parameters = parameters;
    return this;
  }

  public DatabaseTestConnectionSchema putParametersItem(String key, Object parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<String, Object>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

   /**
   * DB-specific parameters for configuration
   * @return parameters
  **/
  @Schema(description = "DB-specific parameters for configuration")
  public Map<String, Object> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, Object> parameters) {
    this.parameters = parameters;
  }

  public DatabaseTestConnectionSchema serverCert(String serverCert) {
    this.serverCert = serverCert;
    return this;
  }

   /**
   * &lt;p&gt;Optional CA_BUNDLE contents to validate HTTPS requests. Only available on certain database engines.&lt;/p&gt;
   * @return serverCert
  **/
  @Schema(description = "<p>Optional CA_BUNDLE contents to validate HTTPS requests. Only available on certain database engines.</p>")
  public String getServerCert() {
    return serverCert;
  }

  public void setServerCert(String serverCert) {
    this.serverCert = serverCert;
  }

  public DatabaseTestConnectionSchema sqlalchemyUri(String sqlalchemyUri) {
    this.sqlalchemyUri = sqlalchemyUri;
    return this;
  }

   /**
   * &lt;p&gt;Refer to the &lt;a href&#x3D;\&quot;https://docs.sqlalchemy.org/en/rel_1_2/core/engines.html#database-urls\&quot;&gt;SqlAlchemy docs&lt;/a&gt; for more information on how to structure your URI.&lt;/p&gt;
   * @return sqlalchemyUri
  **/
  @Schema(description = "<p>Refer to the <a href=\"https://docs.sqlalchemy.org/en/rel_1_2/core/engines.html#database-urls\">SqlAlchemy docs</a> for more information on how to structure your URI.</p>")
  public String getSqlalchemyUri() {
    return sqlalchemyUri;
  }

  public void setSqlalchemyUri(String sqlalchemyUri) {
    this.sqlalchemyUri = sqlalchemyUri;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseTestConnectionSchema databaseTestConnectionSchema = (DatabaseTestConnectionSchema) o;
    return Objects.equals(this.configurationMethod, databaseTestConnectionSchema.configurationMethod) &&
        Objects.equals(this.databaseName, databaseTestConnectionSchema.databaseName) &&
        Objects.equals(this.encryptedExtra, databaseTestConnectionSchema.encryptedExtra) &&
        Objects.equals(this.engine, databaseTestConnectionSchema.engine) &&
        Objects.equals(this.extra, databaseTestConnectionSchema.extra) &&
        Objects.equals(this.impersonateUser, databaseTestConnectionSchema.impersonateUser) &&
        Objects.equals(this.parameters, databaseTestConnectionSchema.parameters) &&
        Objects.equals(this.serverCert, databaseTestConnectionSchema.serverCert) &&
        Objects.equals(this.sqlalchemyUri, databaseTestConnectionSchema.sqlalchemyUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configurationMethod, databaseName, encryptedExtra, engine, extra, impersonateUser, parameters, serverCert, sqlalchemyUri);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseTestConnectionSchema {\n");
    
    sb.append("    configurationMethod: ").append(toIndentedString(configurationMethod)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    encryptedExtra: ").append(toIndentedString(encryptedExtra)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    extra: ").append(toIndentedString(extra)).append("\n");
    sb.append("    impersonateUser: ").append(toIndentedString(impersonateUser)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    serverCert: ").append(toIndentedString(serverCert)).append("\n");
    sb.append("    sqlalchemyUri: ").append(toIndentedString(sqlalchemyUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
