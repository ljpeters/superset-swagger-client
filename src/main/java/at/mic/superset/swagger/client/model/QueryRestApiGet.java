/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import at.mic.superset.swagger.client.model.QueryRestApiGetDatabase;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import org.threeten.bp.OffsetDateTime;
/**
 * QueryRestApiGet
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-08-29T14:48:42.974+02:00[Europe/Berlin]")
public class QueryRestApiGet {
  @SerializedName("changed_on")
  private OffsetDateTime changedOn = null;

  @SerializedName("client_id")
  private String clientId = null;

  @SerializedName("database")
  private QueryRestApiGetDatabase database = null;

  @SerializedName("end_result_backend_time")
  private BigDecimal endResultBackendTime = null;

  @SerializedName("end_time")
  private BigDecimal endTime = null;

  @SerializedName("error_message")
  private String errorMessage = null;

  @SerializedName("executed_sql")
  private String executedSql = null;

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("limit")
  private Integer limit = null;

  @SerializedName("progress")
  private Integer progress = null;

  @SerializedName("results_key")
  private String resultsKey = null;

  @SerializedName("rows")
  private Integer rows = null;

  @SerializedName("schema")
  private String schema = null;

  @SerializedName("select_as_cta")
  private Boolean selectAsCta = null;

  @SerializedName("select_as_cta_used")
  private Boolean selectAsCtaUsed = null;

  @SerializedName("select_sql")
  private String selectSql = null;

  @SerializedName("sql")
  private String sql = null;

  @SerializedName("sql_editor_id")
  private String sqlEditorId = null;

  @SerializedName("start_running_time")
  private BigDecimal startRunningTime = null;

  @SerializedName("start_time")
  private BigDecimal startTime = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("tab_name")
  private String tabName = null;

  @SerializedName("tmp_schema_name")
  private String tmpSchemaName = null;

  @SerializedName("tmp_table_name")
  private String tmpTableName = null;

  @SerializedName("tracking_url")
  private String trackingUrl = null;

  public QueryRestApiGet changedOn(OffsetDateTime changedOn) {
    this.changedOn = changedOn;
    return this;
  }

   /**
   * Get changedOn
   * @return changedOn
  **/
  @Schema(description = "")
  public OffsetDateTime getChangedOn() {
    return changedOn;
  }

  public void setChangedOn(OffsetDateTime changedOn) {
    this.changedOn = changedOn;
  }

  public QueryRestApiGet clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

   /**
   * Get clientId
   * @return clientId
  **/
  @Schema(required = true, description = "")
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }

  public QueryRestApiGet database(QueryRestApiGetDatabase database) {
    this.database = database;
    return this;
  }

   /**
   * Get database
   * @return database
  **/
  @Schema(required = true, description = "")
  public QueryRestApiGetDatabase getDatabase() {
    return database;
  }

  public void setDatabase(QueryRestApiGetDatabase database) {
    this.database = database;
  }

  public QueryRestApiGet endResultBackendTime(BigDecimal endResultBackendTime) {
    this.endResultBackendTime = endResultBackendTime;
    return this;
  }

   /**
   * Get endResultBackendTime
   * @return endResultBackendTime
  **/
  @Schema(description = "")
  public BigDecimal getEndResultBackendTime() {
    return endResultBackendTime;
  }

  public void setEndResultBackendTime(BigDecimal endResultBackendTime) {
    this.endResultBackendTime = endResultBackendTime;
  }

  public QueryRestApiGet endTime(BigDecimal endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * Get endTime
   * @return endTime
  **/
  @Schema(description = "")
  public BigDecimal getEndTime() {
    return endTime;
  }

  public void setEndTime(BigDecimal endTime) {
    this.endTime = endTime;
  }

  public QueryRestApiGet errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * Get errorMessage
   * @return errorMessage
  **/
  @Schema(description = "")
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }

  public QueryRestApiGet executedSql(String executedSql) {
    this.executedSql = executedSql;
    return this;
  }

   /**
   * Get executedSql
   * @return executedSql
  **/
  @Schema(description = "")
  public String getExecutedSql() {
    return executedSql;
  }

  public void setExecutedSql(String executedSql) {
    this.executedSql = executedSql;
  }

  public QueryRestApiGet id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public QueryRestApiGet limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * Get limit
   * @return limit
  **/
  @Schema(description = "")
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }

  public QueryRestApiGet progress(Integer progress) {
    this.progress = progress;
    return this;
  }

   /**
   * Get progress
   * @return progress
  **/
  @Schema(description = "")
  public Integer getProgress() {
    return progress;
  }

  public void setProgress(Integer progress) {
    this.progress = progress;
  }

  public QueryRestApiGet resultsKey(String resultsKey) {
    this.resultsKey = resultsKey;
    return this;
  }

   /**
   * Get resultsKey
   * @return resultsKey
  **/
  @Schema(description = "")
  public String getResultsKey() {
    return resultsKey;
  }

  public void setResultsKey(String resultsKey) {
    this.resultsKey = resultsKey;
  }

  public QueryRestApiGet rows(Integer rows) {
    this.rows = rows;
    return this;
  }

   /**
   * Get rows
   * @return rows
  **/
  @Schema(description = "")
  public Integer getRows() {
    return rows;
  }

  public void setRows(Integer rows) {
    this.rows = rows;
  }

  public QueryRestApiGet schema(String schema) {
    this.schema = schema;
    return this;
  }

   /**
   * Get schema
   * @return schema
  **/
  @Schema(description = "")
  public String getSchema() {
    return schema;
  }

  public void setSchema(String schema) {
    this.schema = schema;
  }

  public QueryRestApiGet selectAsCta(Boolean selectAsCta) {
    this.selectAsCta = selectAsCta;
    return this;
  }

   /**
   * Get selectAsCta
   * @return selectAsCta
  **/
  @Schema(description = "")
  public Boolean isSelectAsCta() {
    return selectAsCta;
  }

  public void setSelectAsCta(Boolean selectAsCta) {
    this.selectAsCta = selectAsCta;
  }

  public QueryRestApiGet selectAsCtaUsed(Boolean selectAsCtaUsed) {
    this.selectAsCtaUsed = selectAsCtaUsed;
    return this;
  }

   /**
   * Get selectAsCtaUsed
   * @return selectAsCtaUsed
  **/
  @Schema(description = "")
  public Boolean isSelectAsCtaUsed() {
    return selectAsCtaUsed;
  }

  public void setSelectAsCtaUsed(Boolean selectAsCtaUsed) {
    this.selectAsCtaUsed = selectAsCtaUsed;
  }

  public QueryRestApiGet selectSql(String selectSql) {
    this.selectSql = selectSql;
    return this;
  }

   /**
   * Get selectSql
   * @return selectSql
  **/
  @Schema(description = "")
  public String getSelectSql() {
    return selectSql;
  }

  public void setSelectSql(String selectSql) {
    this.selectSql = selectSql;
  }

  public QueryRestApiGet sql(String sql) {
    this.sql = sql;
    return this;
  }

   /**
   * Get sql
   * @return sql
  **/
  @Schema(description = "")
  public String getSql() {
    return sql;
  }

  public void setSql(String sql) {
    this.sql = sql;
  }

  public QueryRestApiGet sqlEditorId(String sqlEditorId) {
    this.sqlEditorId = sqlEditorId;
    return this;
  }

   /**
   * Get sqlEditorId
   * @return sqlEditorId
  **/
  @Schema(description = "")
  public String getSqlEditorId() {
    return sqlEditorId;
  }

  public void setSqlEditorId(String sqlEditorId) {
    this.sqlEditorId = sqlEditorId;
  }

  public QueryRestApiGet startRunningTime(BigDecimal startRunningTime) {
    this.startRunningTime = startRunningTime;
    return this;
  }

   /**
   * Get startRunningTime
   * @return startRunningTime
  **/
  @Schema(description = "")
  public BigDecimal getStartRunningTime() {
    return startRunningTime;
  }

  public void setStartRunningTime(BigDecimal startRunningTime) {
    this.startRunningTime = startRunningTime;
  }

  public QueryRestApiGet startTime(BigDecimal startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * Get startTime
   * @return startTime
  **/
  @Schema(description = "")
  public BigDecimal getStartTime() {
    return startTime;
  }

  public void setStartTime(BigDecimal startTime) {
    this.startTime = startTime;
  }

  public QueryRestApiGet status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public QueryRestApiGet tabName(String tabName) {
    this.tabName = tabName;
    return this;
  }

   /**
   * Get tabName
   * @return tabName
  **/
  @Schema(description = "")
  public String getTabName() {
    return tabName;
  }

  public void setTabName(String tabName) {
    this.tabName = tabName;
  }

  public QueryRestApiGet tmpSchemaName(String tmpSchemaName) {
    this.tmpSchemaName = tmpSchemaName;
    return this;
  }

   /**
   * Get tmpSchemaName
   * @return tmpSchemaName
  **/
  @Schema(description = "")
  public String getTmpSchemaName() {
    return tmpSchemaName;
  }

  public void setTmpSchemaName(String tmpSchemaName) {
    this.tmpSchemaName = tmpSchemaName;
  }

  public QueryRestApiGet tmpTableName(String tmpTableName) {
    this.tmpTableName = tmpTableName;
    return this;
  }

   /**
   * Get tmpTableName
   * @return tmpTableName
  **/
  @Schema(description = "")
  public String getTmpTableName() {
    return tmpTableName;
  }

  public void setTmpTableName(String tmpTableName) {
    this.tmpTableName = tmpTableName;
  }

  public QueryRestApiGet trackingUrl(String trackingUrl) {
    this.trackingUrl = trackingUrl;
    return this;
  }

   /**
   * Get trackingUrl
   * @return trackingUrl
  **/
  @Schema(description = "")
  public String getTrackingUrl() {
    return trackingUrl;
  }

  public void setTrackingUrl(String trackingUrl) {
    this.trackingUrl = trackingUrl;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryRestApiGet queryRestApiGet = (QueryRestApiGet) o;
    return Objects.equals(this.changedOn, queryRestApiGet.changedOn) &&
        Objects.equals(this.clientId, queryRestApiGet.clientId) &&
        Objects.equals(this.database, queryRestApiGet.database) &&
        Objects.equals(this.endResultBackendTime, queryRestApiGet.endResultBackendTime) &&
        Objects.equals(this.endTime, queryRestApiGet.endTime) &&
        Objects.equals(this.errorMessage, queryRestApiGet.errorMessage) &&
        Objects.equals(this.executedSql, queryRestApiGet.executedSql) &&
        Objects.equals(this.id, queryRestApiGet.id) &&
        Objects.equals(this.limit, queryRestApiGet.limit) &&
        Objects.equals(this.progress, queryRestApiGet.progress) &&
        Objects.equals(this.resultsKey, queryRestApiGet.resultsKey) &&
        Objects.equals(this.rows, queryRestApiGet.rows) &&
        Objects.equals(this.schema, queryRestApiGet.schema) &&
        Objects.equals(this.selectAsCta, queryRestApiGet.selectAsCta) &&
        Objects.equals(this.selectAsCtaUsed, queryRestApiGet.selectAsCtaUsed) &&
        Objects.equals(this.selectSql, queryRestApiGet.selectSql) &&
        Objects.equals(this.sql, queryRestApiGet.sql) &&
        Objects.equals(this.sqlEditorId, queryRestApiGet.sqlEditorId) &&
        Objects.equals(this.startRunningTime, queryRestApiGet.startRunningTime) &&
        Objects.equals(this.startTime, queryRestApiGet.startTime) &&
        Objects.equals(this.status, queryRestApiGet.status) &&
        Objects.equals(this.tabName, queryRestApiGet.tabName) &&
        Objects.equals(this.tmpSchemaName, queryRestApiGet.tmpSchemaName) &&
        Objects.equals(this.tmpTableName, queryRestApiGet.tmpTableName) &&
        Objects.equals(this.trackingUrl, queryRestApiGet.trackingUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changedOn, clientId, database, endResultBackendTime, endTime, errorMessage, executedSql, id, limit, progress, resultsKey, rows, schema, selectAsCta, selectAsCtaUsed, selectSql, sql, sqlEditorId, startRunningTime, startTime, status, tabName, tmpSchemaName, tmpTableName, trackingUrl);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryRestApiGet {\n");
    
    sb.append("    changedOn: ").append(toIndentedString(changedOn)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    endResultBackendTime: ").append(toIndentedString(endResultBackendTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    executedSql: ").append(toIndentedString(executedSql)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    resultsKey: ").append(toIndentedString(resultsKey)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    selectAsCta: ").append(toIndentedString(selectAsCta)).append("\n");
    sb.append("    selectAsCtaUsed: ").append(toIndentedString(selectAsCtaUsed)).append("\n");
    sb.append("    selectSql: ").append(toIndentedString(selectSql)).append("\n");
    sb.append("    sql: ").append(toIndentedString(sql)).append("\n");
    sb.append("    sqlEditorId: ").append(toIndentedString(sqlEditorId)).append("\n");
    sb.append("    startRunningTime: ").append(toIndentedString(startRunningTime)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tabName: ").append(toIndentedString(tabName)).append("\n");
    sb.append("    tmpSchemaName: ").append(toIndentedString(tmpSchemaName)).append("\n");
    sb.append("    tmpTableName: ").append(toIndentedString(tmpTableName)).append("\n");
    sb.append("    trackingUrl: ").append(toIndentedString(trackingUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
