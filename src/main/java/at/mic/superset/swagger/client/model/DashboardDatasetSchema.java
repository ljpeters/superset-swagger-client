/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import at.mic.superset.swagger.client.model.Database;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * DashboardDatasetSchema
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-08-29T14:48:42.974+02:00[Europe/Berlin]")
public class DashboardDatasetSchema {
  @SerializedName("cache_timeout")
  private Integer cacheTimeout = null;

  @SerializedName("column_formats")
  private Object columnFormats = null;

  @SerializedName("column_types")
  private List<Integer> columnTypes = null;

  @SerializedName("columns")
  private List<Object> columns = null;

  @SerializedName("database")
  private Database database = null;

  @SerializedName("datasource_name")
  private String datasourceName = null;

  @SerializedName("default_endpoint")
  private String defaultEndpoint = null;

  @SerializedName("edit_url")
  private String editUrl = null;

  @SerializedName("fetch_values_predicate")
  private String fetchValuesPredicate = null;

  @SerializedName("filter_select")
  private Boolean filterSelect = null;

  @SerializedName("filter_select_enabled")
  private Boolean filterSelectEnabled = null;

  @SerializedName("granularity_sqla")
  private List<List<String>> granularitySqla = null;

  @SerializedName("health_check_message")
  private String healthCheckMessage = null;

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("is_sqllab_view")
  private Boolean isSqllabView = null;

  @SerializedName("main_dttm_col")
  private String mainDttmCol = null;

  @SerializedName("metrics")
  private List<Object> metrics = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("offset")
  private Integer offset = null;

  @SerializedName("order_by_choices")
  private List<List<String>> orderByChoices = null;

  @SerializedName("owners")
  private List<Integer> owners = null;

  @SerializedName("params")
  private String params = null;

  @SerializedName("perm")
  private String perm = null;

  @SerializedName("schema")
  private String schema = null;

  @SerializedName("select_star")
  private String selectStar = null;

  @SerializedName("sql")
  private String sql = null;

  @SerializedName("table_name")
  private String tableName = null;

  @SerializedName("template_params")
  private String templateParams = null;

  @SerializedName("time_grain_sqla")
  private List<List<String>> timeGrainSqla = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("uid")
  private String uid = null;

  @SerializedName("verbose_map")
  private Map<String, String> verboseMap = null;

  public DashboardDatasetSchema cacheTimeout(Integer cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
    return this;
  }

   /**
   * Get cacheTimeout
   * @return cacheTimeout
  **/
  @Schema(description = "")
  public Integer getCacheTimeout() {
    return cacheTimeout;
  }

  public void setCacheTimeout(Integer cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
  }

  public DashboardDatasetSchema columnFormats(Object columnFormats) {
    this.columnFormats = columnFormats;
    return this;
  }

   /**
   * Get columnFormats
   * @return columnFormats
  **/
  @Schema(description = "")
  public Object getColumnFormats() {
    return columnFormats;
  }

  public void setColumnFormats(Object columnFormats) {
    this.columnFormats = columnFormats;
  }

  public DashboardDatasetSchema columnTypes(List<Integer> columnTypes) {
    this.columnTypes = columnTypes;
    return this;
  }

  public DashboardDatasetSchema addColumnTypesItem(Integer columnTypesItem) {
    if (this.columnTypes == null) {
      this.columnTypes = new ArrayList<Integer>();
    }
    this.columnTypes.add(columnTypesItem);
    return this;
  }

   /**
   * Get columnTypes
   * @return columnTypes
  **/
  @Schema(description = "")
  public List<Integer> getColumnTypes() {
    return columnTypes;
  }

  public void setColumnTypes(List<Integer> columnTypes) {
    this.columnTypes = columnTypes;
  }

  public DashboardDatasetSchema columns(List<Object> columns) {
    this.columns = columns;
    return this;
  }

  public DashboardDatasetSchema addColumnsItem(Object columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<Object>();
    }
    this.columns.add(columnsItem);
    return this;
  }

   /**
   * Get columns
   * @return columns
  **/
  @Schema(description = "")
  public List<Object> getColumns() {
    return columns;
  }

  public void setColumns(List<Object> columns) {
    this.columns = columns;
  }

  public DashboardDatasetSchema database(Database database) {
    this.database = database;
    return this;
  }

   /**
   * Get database
   * @return database
  **/
  @Schema(description = "")
  public Database getDatabase() {
    return database;
  }

  public void setDatabase(Database database) {
    this.database = database;
  }

  public DashboardDatasetSchema datasourceName(String datasourceName) {
    this.datasourceName = datasourceName;
    return this;
  }

   /**
   * Get datasourceName
   * @return datasourceName
  **/
  @Schema(description = "")
  public String getDatasourceName() {
    return datasourceName;
  }

  public void setDatasourceName(String datasourceName) {
    this.datasourceName = datasourceName;
  }

  public DashboardDatasetSchema defaultEndpoint(String defaultEndpoint) {
    this.defaultEndpoint = defaultEndpoint;
    return this;
  }

   /**
   * Get defaultEndpoint
   * @return defaultEndpoint
  **/
  @Schema(description = "")
  public String getDefaultEndpoint() {
    return defaultEndpoint;
  }

  public void setDefaultEndpoint(String defaultEndpoint) {
    this.defaultEndpoint = defaultEndpoint;
  }

  public DashboardDatasetSchema editUrl(String editUrl) {
    this.editUrl = editUrl;
    return this;
  }

   /**
   * Get editUrl
   * @return editUrl
  **/
  @Schema(description = "")
  public String getEditUrl() {
    return editUrl;
  }

  public void setEditUrl(String editUrl) {
    this.editUrl = editUrl;
  }

  public DashboardDatasetSchema fetchValuesPredicate(String fetchValuesPredicate) {
    this.fetchValuesPredicate = fetchValuesPredicate;
    return this;
  }

   /**
   * Get fetchValuesPredicate
   * @return fetchValuesPredicate
  **/
  @Schema(description = "")
  public String getFetchValuesPredicate() {
    return fetchValuesPredicate;
  }

  public void setFetchValuesPredicate(String fetchValuesPredicate) {
    this.fetchValuesPredicate = fetchValuesPredicate;
  }

  public DashboardDatasetSchema filterSelect(Boolean filterSelect) {
    this.filterSelect = filterSelect;
    return this;
  }

   /**
   * Get filterSelect
   * @return filterSelect
  **/
  @Schema(description = "")
  public Boolean isFilterSelect() {
    return filterSelect;
  }

  public void setFilterSelect(Boolean filterSelect) {
    this.filterSelect = filterSelect;
  }

  public DashboardDatasetSchema filterSelectEnabled(Boolean filterSelectEnabled) {
    this.filterSelectEnabled = filterSelectEnabled;
    return this;
  }

   /**
   * Get filterSelectEnabled
   * @return filterSelectEnabled
  **/
  @Schema(description = "")
  public Boolean isFilterSelectEnabled() {
    return filterSelectEnabled;
  }

  public void setFilterSelectEnabled(Boolean filterSelectEnabled) {
    this.filterSelectEnabled = filterSelectEnabled;
  }

  public DashboardDatasetSchema granularitySqla(List<List<String>> granularitySqla) {
    this.granularitySqla = granularitySqla;
    return this;
  }

  public DashboardDatasetSchema addGranularitySqlaItem(List<String> granularitySqlaItem) {
    if (this.granularitySqla == null) {
      this.granularitySqla = new ArrayList<List<String>>();
    }
    this.granularitySqla.add(granularitySqlaItem);
    return this;
  }

   /**
   * Get granularitySqla
   * @return granularitySqla
  **/
  @Schema(description = "")
  public List<List<String>> getGranularitySqla() {
    return granularitySqla;
  }

  public void setGranularitySqla(List<List<String>> granularitySqla) {
    this.granularitySqla = granularitySqla;
  }

  public DashboardDatasetSchema healthCheckMessage(String healthCheckMessage) {
    this.healthCheckMessage = healthCheckMessage;
    return this;
  }

   /**
   * Get healthCheckMessage
   * @return healthCheckMessage
  **/
  @Schema(description = "")
  public String getHealthCheckMessage() {
    return healthCheckMessage;
  }

  public void setHealthCheckMessage(String healthCheckMessage) {
    this.healthCheckMessage = healthCheckMessage;
  }

  public DashboardDatasetSchema id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public DashboardDatasetSchema isSqllabView(Boolean isSqllabView) {
    this.isSqllabView = isSqllabView;
    return this;
  }

   /**
   * Get isSqllabView
   * @return isSqllabView
  **/
  @Schema(description = "")
  public Boolean isIsSqllabView() {
    return isSqllabView;
  }

  public void setIsSqllabView(Boolean isSqllabView) {
    this.isSqllabView = isSqllabView;
  }

  public DashboardDatasetSchema mainDttmCol(String mainDttmCol) {
    this.mainDttmCol = mainDttmCol;
    return this;
  }

   /**
   * Get mainDttmCol
   * @return mainDttmCol
  **/
  @Schema(description = "")
  public String getMainDttmCol() {
    return mainDttmCol;
  }

  public void setMainDttmCol(String mainDttmCol) {
    this.mainDttmCol = mainDttmCol;
  }

  public DashboardDatasetSchema metrics(List<Object> metrics) {
    this.metrics = metrics;
    return this;
  }

  public DashboardDatasetSchema addMetricsItem(Object metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<Object>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

   /**
   * Get metrics
   * @return metrics
  **/
  @Schema(description = "")
  public List<Object> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<Object> metrics) {
    this.metrics = metrics;
  }

  public DashboardDatasetSchema name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DashboardDatasetSchema offset(Integer offset) {
    this.offset = offset;
    return this;
  }

   /**
   * Get offset
   * @return offset
  **/
  @Schema(description = "")
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }

  public DashboardDatasetSchema orderByChoices(List<List<String>> orderByChoices) {
    this.orderByChoices = orderByChoices;
    return this;
  }

  public DashboardDatasetSchema addOrderByChoicesItem(List<String> orderByChoicesItem) {
    if (this.orderByChoices == null) {
      this.orderByChoices = new ArrayList<List<String>>();
    }
    this.orderByChoices.add(orderByChoicesItem);
    return this;
  }

   /**
   * Get orderByChoices
   * @return orderByChoices
  **/
  @Schema(description = "")
  public List<List<String>> getOrderByChoices() {
    return orderByChoices;
  }

  public void setOrderByChoices(List<List<String>> orderByChoices) {
    this.orderByChoices = orderByChoices;
  }

  public DashboardDatasetSchema owners(List<Integer> owners) {
    this.owners = owners;
    return this;
  }

  public DashboardDatasetSchema addOwnersItem(Integer ownersItem) {
    if (this.owners == null) {
      this.owners = new ArrayList<Integer>();
    }
    this.owners.add(ownersItem);
    return this;
  }

   /**
   * Get owners
   * @return owners
  **/
  @Schema(description = "")
  public List<Integer> getOwners() {
    return owners;
  }

  public void setOwners(List<Integer> owners) {
    this.owners = owners;
  }

  public DashboardDatasetSchema params(String params) {
    this.params = params;
    return this;
  }

   /**
   * Get params
   * @return params
  **/
  @Schema(description = "")
  public String getParams() {
    return params;
  }

  public void setParams(String params) {
    this.params = params;
  }

  public DashboardDatasetSchema perm(String perm) {
    this.perm = perm;
    return this;
  }

   /**
   * Get perm
   * @return perm
  **/
  @Schema(description = "")
  public String getPerm() {
    return perm;
  }

  public void setPerm(String perm) {
    this.perm = perm;
  }

  public DashboardDatasetSchema schema(String schema) {
    this.schema = schema;
    return this;
  }

   /**
   * Get schema
   * @return schema
  **/
  @Schema(description = "")
  public String getSchema() {
    return schema;
  }

  public void setSchema(String schema) {
    this.schema = schema;
  }

  public DashboardDatasetSchema selectStar(String selectStar) {
    this.selectStar = selectStar;
    return this;
  }

   /**
   * Get selectStar
   * @return selectStar
  **/
  @Schema(description = "")
  public String getSelectStar() {
    return selectStar;
  }

  public void setSelectStar(String selectStar) {
    this.selectStar = selectStar;
  }

  public DashboardDatasetSchema sql(String sql) {
    this.sql = sql;
    return this;
  }

   /**
   * Get sql
   * @return sql
  **/
  @Schema(description = "")
  public String getSql() {
    return sql;
  }

  public void setSql(String sql) {
    this.sql = sql;
  }

  public DashboardDatasetSchema tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

   /**
   * Get tableName
   * @return tableName
  **/
  @Schema(description = "")
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }

  public DashboardDatasetSchema templateParams(String templateParams) {
    this.templateParams = templateParams;
    return this;
  }

   /**
   * Get templateParams
   * @return templateParams
  **/
  @Schema(description = "")
  public String getTemplateParams() {
    return templateParams;
  }

  public void setTemplateParams(String templateParams) {
    this.templateParams = templateParams;
  }

  public DashboardDatasetSchema timeGrainSqla(List<List<String>> timeGrainSqla) {
    this.timeGrainSqla = timeGrainSqla;
    return this;
  }

  public DashboardDatasetSchema addTimeGrainSqlaItem(List<String> timeGrainSqlaItem) {
    if (this.timeGrainSqla == null) {
      this.timeGrainSqla = new ArrayList<List<String>>();
    }
    this.timeGrainSqla.add(timeGrainSqlaItem);
    return this;
  }

   /**
   * Get timeGrainSqla
   * @return timeGrainSqla
  **/
  @Schema(description = "")
  public List<List<String>> getTimeGrainSqla() {
    return timeGrainSqla;
  }

  public void setTimeGrainSqla(List<List<String>> timeGrainSqla) {
    this.timeGrainSqla = timeGrainSqla;
  }

  public DashboardDatasetSchema type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public DashboardDatasetSchema uid(String uid) {
    this.uid = uid;
    return this;
  }

   /**
   * Get uid
   * @return uid
  **/
  @Schema(description = "")
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }

  public DashboardDatasetSchema verboseMap(Map<String, String> verboseMap) {
    this.verboseMap = verboseMap;
    return this;
  }

  public DashboardDatasetSchema putVerboseMapItem(String key, String verboseMapItem) {
    if (this.verboseMap == null) {
      this.verboseMap = new HashMap<String, String>();
    }
    this.verboseMap.put(key, verboseMapItem);
    return this;
  }

   /**
   * Get verboseMap
   * @return verboseMap
  **/
  @Schema(description = "")
  public Map<String, String> getVerboseMap() {
    return verboseMap;
  }

  public void setVerboseMap(Map<String, String> verboseMap) {
    this.verboseMap = verboseMap;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DashboardDatasetSchema dashboardDatasetSchema = (DashboardDatasetSchema) o;
    return Objects.equals(this.cacheTimeout, dashboardDatasetSchema.cacheTimeout) &&
        Objects.equals(this.columnFormats, dashboardDatasetSchema.columnFormats) &&
        Objects.equals(this.columnTypes, dashboardDatasetSchema.columnTypes) &&
        Objects.equals(this.columns, dashboardDatasetSchema.columns) &&
        Objects.equals(this.database, dashboardDatasetSchema.database) &&
        Objects.equals(this.datasourceName, dashboardDatasetSchema.datasourceName) &&
        Objects.equals(this.defaultEndpoint, dashboardDatasetSchema.defaultEndpoint) &&
        Objects.equals(this.editUrl, dashboardDatasetSchema.editUrl) &&
        Objects.equals(this.fetchValuesPredicate, dashboardDatasetSchema.fetchValuesPredicate) &&
        Objects.equals(this.filterSelect, dashboardDatasetSchema.filterSelect) &&
        Objects.equals(this.filterSelectEnabled, dashboardDatasetSchema.filterSelectEnabled) &&
        Objects.equals(this.granularitySqla, dashboardDatasetSchema.granularitySqla) &&
        Objects.equals(this.healthCheckMessage, dashboardDatasetSchema.healthCheckMessage) &&
        Objects.equals(this.id, dashboardDatasetSchema.id) &&
        Objects.equals(this.isSqllabView, dashboardDatasetSchema.isSqllabView) &&
        Objects.equals(this.mainDttmCol, dashboardDatasetSchema.mainDttmCol) &&
        Objects.equals(this.metrics, dashboardDatasetSchema.metrics) &&
        Objects.equals(this.name, dashboardDatasetSchema.name) &&
        Objects.equals(this.offset, dashboardDatasetSchema.offset) &&
        Objects.equals(this.orderByChoices, dashboardDatasetSchema.orderByChoices) &&
        Objects.equals(this.owners, dashboardDatasetSchema.owners) &&
        Objects.equals(this.params, dashboardDatasetSchema.params) &&
        Objects.equals(this.perm, dashboardDatasetSchema.perm) &&
        Objects.equals(this.schema, dashboardDatasetSchema.schema) &&
        Objects.equals(this.selectStar, dashboardDatasetSchema.selectStar) &&
        Objects.equals(this.sql, dashboardDatasetSchema.sql) &&
        Objects.equals(this.tableName, dashboardDatasetSchema.tableName) &&
        Objects.equals(this.templateParams, dashboardDatasetSchema.templateParams) &&
        Objects.equals(this.timeGrainSqla, dashboardDatasetSchema.timeGrainSqla) &&
        Objects.equals(this.type, dashboardDatasetSchema.type) &&
        Objects.equals(this.uid, dashboardDatasetSchema.uid) &&
        Objects.equals(this.verboseMap, dashboardDatasetSchema.verboseMap);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheTimeout, columnFormats, columnTypes, columns, database, datasourceName, defaultEndpoint, editUrl, fetchValuesPredicate, filterSelect, filterSelectEnabled, granularitySqla, healthCheckMessage, id, isSqllabView, mainDttmCol, metrics, name, offset, orderByChoices, owners, params, perm, schema, selectStar, sql, tableName, templateParams, timeGrainSqla, type, uid, verboseMap);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DashboardDatasetSchema {\n");
    
    sb.append("    cacheTimeout: ").append(toIndentedString(cacheTimeout)).append("\n");
    sb.append("    columnFormats: ").append(toIndentedString(columnFormats)).append("\n");
    sb.append("    columnTypes: ").append(toIndentedString(columnTypes)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    datasourceName: ").append(toIndentedString(datasourceName)).append("\n");
    sb.append("    defaultEndpoint: ").append(toIndentedString(defaultEndpoint)).append("\n");
    sb.append("    editUrl: ").append(toIndentedString(editUrl)).append("\n");
    sb.append("    fetchValuesPredicate: ").append(toIndentedString(fetchValuesPredicate)).append("\n");
    sb.append("    filterSelect: ").append(toIndentedString(filterSelect)).append("\n");
    sb.append("    filterSelectEnabled: ").append(toIndentedString(filterSelectEnabled)).append("\n");
    sb.append("    granularitySqla: ").append(toIndentedString(granularitySqla)).append("\n");
    sb.append("    healthCheckMessage: ").append(toIndentedString(healthCheckMessage)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isSqllabView: ").append(toIndentedString(isSqllabView)).append("\n");
    sb.append("    mainDttmCol: ").append(toIndentedString(mainDttmCol)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    orderByChoices: ").append(toIndentedString(orderByChoices)).append("\n");
    sb.append("    owners: ").append(toIndentedString(owners)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    perm: ").append(toIndentedString(perm)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    selectStar: ").append(toIndentedString(selectStar)).append("\n");
    sb.append("    sql: ").append(toIndentedString(sql)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    templateParams: ").append(toIndentedString(templateParams)).append("\n");
    sb.append("    timeGrainSqla: ").append(toIndentedString(timeGrainSqla)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    verboseMap: ").append(toIndentedString(verboseMap)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
