/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * FormDataPutSchema
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-08-29T14:48:42.974+02:00[Europe/Berlin]")
public class FormDataPutSchema {
  @SerializedName("chart_id")
  private Integer chartId = null;

  @SerializedName("datasource_id")
  private Integer datasourceId = null;

  /**
   * The datasource type
   */
  @JsonAdapter(DatasourceTypeEnum.Adapter.class)
  public enum DatasourceTypeEnum {
    SL_TABLE("sl_table"),
    TABLE("table"),
    DATASET("dataset"),
    QUERY("query"),
    SAVED_QUERY("saved_query"),
    VIEW("view");

    private String value;

    DatasourceTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DatasourceTypeEnum fromValue(String input) {
      for (DatasourceTypeEnum b : DatasourceTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DatasourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DatasourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public DatasourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return DatasourceTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("datasource_type")
  private DatasourceTypeEnum datasourceType = null;

  @SerializedName("form_data")
  private String formData = null;

  public FormDataPutSchema chartId(Integer chartId) {
    this.chartId = chartId;
    return this;
  }

   /**
   * The chart ID
   * @return chartId
  **/
  @Schema(description = "The chart ID")
  public Integer getChartId() {
    return chartId;
  }

  public void setChartId(Integer chartId) {
    this.chartId = chartId;
  }

  public FormDataPutSchema datasourceId(Integer datasourceId) {
    this.datasourceId = datasourceId;
    return this;
  }

   /**
   * The datasource ID
   * @return datasourceId
  **/
  @Schema(required = true, description = "The datasource ID")
  public Integer getDatasourceId() {
    return datasourceId;
  }

  public void setDatasourceId(Integer datasourceId) {
    this.datasourceId = datasourceId;
  }

  public FormDataPutSchema datasourceType(DatasourceTypeEnum datasourceType) {
    this.datasourceType = datasourceType;
    return this;
  }

   /**
   * The datasource type
   * @return datasourceType
  **/
  @Schema(required = true, description = "The datasource type")
  public DatasourceTypeEnum getDatasourceType() {
    return datasourceType;
  }

  public void setDatasourceType(DatasourceTypeEnum datasourceType) {
    this.datasourceType = datasourceType;
  }

  public FormDataPutSchema formData(String formData) {
    this.formData = formData;
    return this;
  }

   /**
   * Any type of JSON supported text.
   * @return formData
  **/
  @Schema(required = true, description = "Any type of JSON supported text.")
  public String getFormData() {
    return formData;
  }

  public void setFormData(String formData) {
    this.formData = formData;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormDataPutSchema formDataPutSchema = (FormDataPutSchema) o;
    return Objects.equals(this.chartId, formDataPutSchema.chartId) &&
        Objects.equals(this.datasourceId, formDataPutSchema.datasourceId) &&
        Objects.equals(this.datasourceType, formDataPutSchema.datasourceType) &&
        Objects.equals(this.formData, formDataPutSchema.formData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chartId, datasourceId, datasourceType, formData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormDataPutSchema {\n");
    
    sb.append("    chartId: ").append(toIndentedString(chartId)).append("\n");
    sb.append("    datasourceId: ").append(toIndentedString(datasourceId)).append("\n");
    sb.append("    datasourceType: ").append(toIndentedString(datasourceType)).append("\n");
    sb.append("    formData: ").append(toIndentedString(formData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
