/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client;

import at.mic.superset.swagger.ApiCallback;
import at.mic.superset.swagger.ApiClient;
import at.mic.superset.swagger.ApiException;
import at.mic.superset.swagger.ApiResponse;
import at.mic.superset.swagger.Configuration;
import at.mic.superset.swagger.Pair;
import at.mic.superset.swagger.ProgressRequestBody;
import at.mic.superset.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import at.mic.superset.swagger.client.model.GetListSchema;
import at.mic.superset.swagger.client.model.InlineResponse20010;
import at.mic.superset.swagger.client.model.InlineResponse20011;
import at.mic.superset.swagger.client.model.InlineResponse20012;
import at.mic.superset.swagger.client.model.InlineResponse400;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DatabaseApi {
    private ApiClient apiClient;

    public DatabaseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DatabaseApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for databaseGet
     * @param q  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call databaseGetCall(GetListSchema q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/database/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call databaseGetValidateBeforeCall(GetListSchema q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = databaseGetCall(q, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get a list of models
     * @param q  (optional)
     * @return InlineResponse20010
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20010 databaseGet(GetListSchema q) throws ApiException {
        ApiResponse<InlineResponse20010> resp = databaseGetWithHttpInfo(q);
        return resp.getData();
    }

    /**
     * 
     * Get a list of models
     * @param q  (optional)
     * @return ApiResponse&lt;InlineResponse20010&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20010> databaseGetWithHttpInfo(GetListSchema q) throws ApiException {
        com.squareup.okhttp.Call call = databaseGetValidateBeforeCall(q, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20010>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of models
     * @param q  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call databaseGetAsync(GetListSchema q, final ApiCallback<InlineResponse20010> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = databaseGetValidateBeforeCall(q, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20010>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for databasePkSelectStarTableNameGet
     * @param pk The database id (required)
     * @param tableName Table name (required)
     * @param schemaName Table schema (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call databasePkSelectStarTableNameGetCall(Integer pk, String tableName, String schemaName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/database/{pk}/select_star/{table_name}/"
            .replaceAll("\\{" + "pk" + "\\}", apiClient.escapeString(pk.toString()))
            .replaceAll("\\{" + "table_name" + "\\}", apiClient.escapeString(tableName.toString()))
            .replaceAll("\\{" + "schema_name" + "\\}", apiClient.escapeString(schemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call databasePkSelectStarTableNameGetValidateBeforeCall(Integer pk, String tableName, String schemaName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling databasePkSelectStarTableNameGet(Async)");
        }
        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling databasePkSelectStarTableNameGet(Async)");
        }
        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling databasePkSelectStarTableNameGet(Async)");
        }
        
        com.squareup.okhttp.Call call = databasePkSelectStarTableNameGetCall(pk, tableName, schemaName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get database select star for table
     * @param pk The database id (required)
     * @param tableName Table name (required)
     * @param schemaName Table schema (required)
     * @return InlineResponse20011
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20011 databasePkSelectStarTableNameGet(Integer pk, String tableName, String schemaName) throws ApiException {
        ApiResponse<InlineResponse20011> resp = databasePkSelectStarTableNameGetWithHttpInfo(pk, tableName, schemaName);
        return resp.getData();
    }

    /**
     * 
     * Get database select star for table
     * @param pk The database id (required)
     * @param tableName Table name (required)
     * @param schemaName Table schema (required)
     * @return ApiResponse&lt;InlineResponse20011&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20011> databasePkSelectStarTableNameGetWithHttpInfo(Integer pk, String tableName, String schemaName) throws ApiException {
        com.squareup.okhttp.Call call = databasePkSelectStarTableNameGetValidateBeforeCall(pk, tableName, schemaName, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20011>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get database select star for table
     * @param pk The database id (required)
     * @param tableName Table name (required)
     * @param schemaName Table schema (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call databasePkSelectStarTableNameGetAsync(Integer pk, String tableName, String schemaName, final ApiCallback<InlineResponse20011> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = databasePkSelectStarTableNameGetValidateBeforeCall(pk, tableName, schemaName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20011>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for databasePkSelectStarTableNameSchemaNameGet
     * @param pk The database id (required)
     * @param tableName Table name (required)
     * @param schemaName Table schema (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call databasePkSelectStarTableNameSchemaNameGetCall(Integer pk, String tableName, String schemaName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/database/{pk}/select_star/{table_name}/{schema_name}/"
            .replaceAll("\\{" + "pk" + "\\}", apiClient.escapeString(pk.toString()))
            .replaceAll("\\{" + "table_name" + "\\}", apiClient.escapeString(tableName.toString()))
            .replaceAll("\\{" + "schema_name" + "\\}", apiClient.escapeString(schemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call databasePkSelectStarTableNameSchemaNameGetValidateBeforeCall(Integer pk, String tableName, String schemaName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling databasePkSelectStarTableNameSchemaNameGet(Async)");
        }
        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling databasePkSelectStarTableNameSchemaNameGet(Async)");
        }
        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling databasePkSelectStarTableNameSchemaNameGet(Async)");
        }
        
        com.squareup.okhttp.Call call = databasePkSelectStarTableNameSchemaNameGetCall(pk, tableName, schemaName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get database select star for table
     * @param pk The database id (required)
     * @param tableName Table name (required)
     * @param schemaName Table schema (required)
     * @return InlineResponse20011
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20011 databasePkSelectStarTableNameSchemaNameGet(Integer pk, String tableName, String schemaName) throws ApiException {
        ApiResponse<InlineResponse20011> resp = databasePkSelectStarTableNameSchemaNameGetWithHttpInfo(pk, tableName, schemaName);
        return resp.getData();
    }

    /**
     * 
     * Get database select star for table
     * @param pk The database id (required)
     * @param tableName Table name (required)
     * @param schemaName Table schema (required)
     * @return ApiResponse&lt;InlineResponse20011&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20011> databasePkSelectStarTableNameSchemaNameGetWithHttpInfo(Integer pk, String tableName, String schemaName) throws ApiException {
        com.squareup.okhttp.Call call = databasePkSelectStarTableNameSchemaNameGetValidateBeforeCall(pk, tableName, schemaName, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20011>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get database select star for table
     * @param pk The database id (required)
     * @param tableName Table name (required)
     * @param schemaName Table schema (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call databasePkSelectStarTableNameSchemaNameGetAsync(Integer pk, String tableName, String schemaName, final ApiCallback<InlineResponse20011> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = databasePkSelectStarTableNameSchemaNameGetValidateBeforeCall(pk, tableName, schemaName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20011>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for databasePkTableTableNameSchemaNameGet
     * @param pk The database id (required)
     * @param tableName Table name (required)
     * @param schemaName Table schema (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call databasePkTableTableNameSchemaNameGetCall(Integer pk, String tableName, String schemaName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/database/{pk}/table/{table_name}/{schema_name}/"
            .replaceAll("\\{" + "pk" + "\\}", apiClient.escapeString(pk.toString()))
            .replaceAll("\\{" + "table_name" + "\\}", apiClient.escapeString(tableName.toString()))
            .replaceAll("\\{" + "schema_name" + "\\}", apiClient.escapeString(schemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call databasePkTableTableNameSchemaNameGetValidateBeforeCall(Integer pk, String tableName, String schemaName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling databasePkTableTableNameSchemaNameGet(Async)");
        }
        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling databasePkTableTableNameSchemaNameGet(Async)");
        }
        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling databasePkTableTableNameSchemaNameGet(Async)");
        }
        
        com.squareup.okhttp.Call call = databasePkTableTableNameSchemaNameGetCall(pk, tableName, schemaName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get database table metadata
     * @param pk The database id (required)
     * @param tableName Table name (required)
     * @param schemaName Table schema (required)
     * @return InlineResponse20012
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20012 databasePkTableTableNameSchemaNameGet(Integer pk, String tableName, String schemaName) throws ApiException {
        ApiResponse<InlineResponse20012> resp = databasePkTableTableNameSchemaNameGetWithHttpInfo(pk, tableName, schemaName);
        return resp.getData();
    }

    /**
     * 
     * Get database table metadata
     * @param pk The database id (required)
     * @param tableName Table name (required)
     * @param schemaName Table schema (required)
     * @return ApiResponse&lt;InlineResponse20012&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20012> databasePkTableTableNameSchemaNameGetWithHttpInfo(Integer pk, String tableName, String schemaName) throws ApiException {
        com.squareup.okhttp.Call call = databasePkTableTableNameSchemaNameGetValidateBeforeCall(pk, tableName, schemaName, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20012>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get database table metadata
     * @param pk The database id (required)
     * @param tableName Table name (required)
     * @param schemaName Table schema (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call databasePkTableTableNameSchemaNameGetAsync(Integer pk, String tableName, String schemaName, final ApiCallback<InlineResponse20012> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = databasePkTableTableNameSchemaNameGetValidateBeforeCall(pk, tableName, schemaName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20012>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
