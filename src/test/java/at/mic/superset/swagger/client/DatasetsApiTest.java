/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client;

import at.mic.superset.swagger.ApiException;
import at.mic.superset.swagger.client.model.DatasetRelatedObjectsResponse;
import at.mic.superset.swagger.client.model.DatasetRestApiPost;
import at.mic.superset.swagger.client.model.DatasetRestApiPut;
import at.mic.superset.swagger.client.model.DistincResponseSchema;
import java.io.File;
import at.mic.superset.swagger.client.model.GetDeleteIdsSchema;
import at.mic.superset.swagger.client.model.GetExportIdsSchema;
import at.mic.superset.swagger.client.model.GetInfoSchema;
import at.mic.superset.swagger.client.model.GetItemSchema;
import at.mic.superset.swagger.client.model.GetListSchema;
import at.mic.superset.swagger.client.model.GetRelatedSchema;
import at.mic.superset.swagger.client.model.InlineResponse2002;
import at.mic.superset.swagger.client.model.InlineResponse20031;
import at.mic.superset.swagger.client.model.InlineResponse20032;
import at.mic.superset.swagger.client.model.InlineResponse20033;
import at.mic.superset.swagger.client.model.InlineResponse20034;
import at.mic.superset.swagger.client.model.InlineResponse2019;
import at.mic.superset.swagger.client.model.InlineResponse400;
import at.mic.superset.swagger.client.model.RelatedResponseSchema;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DatasetsApi
 */
@Ignore
public class DatasetsApiTest {

    private final DatasetsApi api = new DatasetsApi();

    /**
     * 
     *
     * Deletes multiple Datasets in a bulk operation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1DatasetDeleteTest() throws ApiException {
        GetDeleteIdsSchema q = null;
        InlineResponse400 response = api.apiV1DatasetDelete(q);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1DatasetDistinctColumnNameGetTest() throws ApiException {
        String columnName = null;
        GetRelatedSchema q = null;
        DistincResponseSchema response = api.apiV1DatasetDistinctColumnNameGet(columnName, q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Exports multiple datasets and downloads them as YAML files
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1DatasetExportGetTest() throws ApiException {
        GetExportIdsSchema q = null;
        String response = api.apiV1DatasetExportGet(q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get a list of models
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1DatasetGetTest() throws ApiException {
        GetListSchema q = null;
        InlineResponse20031 response = api.apiV1DatasetGet(q);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1DatasetImportPostTest() throws ApiException {
        File formData = null;
        Boolean overwrite = null;
        String passwords = null;
        InlineResponse400 response = api.apiV1DatasetImportPost(formData, overwrite, passwords);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get metadata information about this API resource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1DatasetInfoGetTest() throws ApiException {
        GetInfoSchema q = null;
        InlineResponse2002 response = api.apiV1DatasetInfoGet(q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Delete a Dataset column
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1DatasetPkColumnColumnIdDeleteTest() throws ApiException {
        Integer pk = null;
        Integer columnId = null;
        InlineResponse400 response = api.apiV1DatasetPkColumnColumnIdDelete(pk, columnId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes a Dataset
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1DatasetPkDeleteTest() throws ApiException {
        Integer pk = null;
        InlineResponse400 response = api.apiV1DatasetPkDelete(pk);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get an item model
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1DatasetPkGetTest() throws ApiException {
        Integer pk = null;
        GetItemSchema q = null;
        InlineResponse20032 response = api.apiV1DatasetPkGet(pk, q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Delete a Dataset metric
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1DatasetPkMetricMetricIdDeleteTest() throws ApiException {
        Integer pk = null;
        Integer metricId = null;
        InlineResponse400 response = api.apiV1DatasetPkMetricMetricIdDelete(pk, metricId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Changes a Dataset
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1DatasetPkPutTest() throws ApiException {
        DatasetRestApiPut body = null;
        Integer pk = null;
        Boolean overrideColumns = null;
        InlineResponse20033 response = api.apiV1DatasetPkPut(body, pk, overrideColumns);

        // TODO: test validations
    }
    /**
     * 
     *
     * Refreshes and updates columns of a dataset
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1DatasetPkRefreshPutTest() throws ApiException {
        Integer pk = null;
        InlineResponse400 response = api.apiV1DatasetPkRefreshPut(pk);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get charts and dashboards count associated to a dataset
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1DatasetPkRelatedObjectsGetTest() throws ApiException {
        Integer pk = null;
        DatasetRelatedObjectsResponse response = api.apiV1DatasetPkRelatedObjectsGet(pk);

        // TODO: test validations
    }
    /**
     * 
     *
     * get samples from a Dataset
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1DatasetPkSamplesGetTest() throws ApiException {
        Integer pk = null;
        Boolean force = null;
        InlineResponse20034 response = api.apiV1DatasetPkSamplesGet(pk, force);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create a new Dataset
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1DatasetPostTest() throws ApiException {
        DatasetRestApiPost body = null;
        InlineResponse2019 response = api.apiV1DatasetPost(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1DatasetRelatedColumnNameGetTest() throws ApiException {
        String columnName = null;
        GetRelatedSchema q = null;
        RelatedResponseSchema response = api.apiV1DatasetRelatedColumnNameGet(columnName, q);

        // TODO: test validations
    }
}
