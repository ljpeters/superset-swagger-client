/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client;

import at.mic.superset.swagger.ApiException;
import at.mic.superset.swagger.client.model.AnnotationLayerRestApiPost;
import at.mic.superset.swagger.client.model.AnnotationLayerRestApiPut;
import at.mic.superset.swagger.client.model.AnnotationRestApiPost;
import at.mic.superset.swagger.client.model.AnnotationRestApiPut;
import at.mic.superset.swagger.client.model.GetDeleteIdsSchema;
import at.mic.superset.swagger.client.model.GetInfoSchema;
import at.mic.superset.swagger.client.model.GetItemSchema;
import at.mic.superset.swagger.client.model.GetListSchema;
import at.mic.superset.swagger.client.model.GetRelatedSchema;
import at.mic.superset.swagger.client.model.InlineResponse2001;
import at.mic.superset.swagger.client.model.InlineResponse2002;
import at.mic.superset.swagger.client.model.InlineResponse2003;
import at.mic.superset.swagger.client.model.InlineResponse2004;
import at.mic.superset.swagger.client.model.InlineResponse2005;
import at.mic.superset.swagger.client.model.InlineResponse2006;
import at.mic.superset.swagger.client.model.InlineResponse2007;
import at.mic.superset.swagger.client.model.InlineResponse201;
import at.mic.superset.swagger.client.model.InlineResponse2011;
import at.mic.superset.swagger.client.model.InlineResponse400;
import at.mic.superset.swagger.client.model.RelatedResponseSchema;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AnnotationLayersApi
 */
@Ignore
public class AnnotationLayersApiTest {

    private final AnnotationLayersApi api = new AnnotationLayersApi();

    /**
     * 
     *
     * Deletes multiple annotation layers in a bulk operation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1AnnotationLayerDeleteTest() throws ApiException {
        GetDeleteIdsSchema q = null;
        InlineResponse400 response = api.apiV1AnnotationLayerDelete(q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1AnnotationLayerGetTest() throws ApiException {
        GetListSchema q = null;
        InlineResponse2001 response = api.apiV1AnnotationLayerGet(q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get metadata information about this API resource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1AnnotationLayerInfoGetTest() throws ApiException {
        GetInfoSchema q = null;
        InlineResponse2002 response = api.apiV1AnnotationLayerInfoGet(q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Delete Annotation layer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1AnnotationLayerPkAnnotationAnnotationIdDeleteTest() throws ApiException {
        Integer pk = null;
        Integer annotationId = null;
        InlineResponse400 response = api.apiV1AnnotationLayerPkAnnotationAnnotationIdDelete(pk, annotationId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get an Annotation layer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1AnnotationLayerPkAnnotationAnnotationIdGetTest() throws ApiException {
        Integer pk = null;
        Integer annotationId = null;
        GetItemSchema q = null;
        InlineResponse2006 response = api.apiV1AnnotationLayerPkAnnotationAnnotationIdGet(pk, annotationId, q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update an Annotation layer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1AnnotationLayerPkAnnotationAnnotationIdPutTest() throws ApiException {
        AnnotationRestApiPut body = null;
        Integer pk = null;
        Integer annotationId = null;
        InlineResponse2007 response = api.apiV1AnnotationLayerPkAnnotationAnnotationIdPut(body, pk, annotationId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes multiple annotation in a bulk operation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1AnnotationLayerPkAnnotationDeleteTest() throws ApiException {
        Integer pk = null;
        GetDeleteIdsSchema q = null;
        InlineResponse400 response = api.apiV1AnnotationLayerPkAnnotationDelete(pk, q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1AnnotationLayerPkAnnotationGetTest() throws ApiException {
        Integer pk = null;
        GetListSchema q = null;
        InlineResponse2005 response = api.apiV1AnnotationLayerPkAnnotationGet(pk, q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create an Annotation layer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1AnnotationLayerPkAnnotationPostTest() throws ApiException {
        AnnotationRestApiPost body = null;
        Integer pk = null;
        InlineResponse2011 response = api.apiV1AnnotationLayerPkAnnotationPost(body, pk);

        // TODO: test validations
    }
    /**
     * 
     *
     * Delete Annotation layer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1AnnotationLayerPkDeleteTest() throws ApiException {
        Integer pk = null;
        InlineResponse400 response = api.apiV1AnnotationLayerPkDelete(pk);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get an Annotation layer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1AnnotationLayerPkGetTest() throws ApiException {
        Integer pk = null;
        GetItemSchema q = null;
        InlineResponse2003 response = api.apiV1AnnotationLayerPkGet(pk, q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update an Annotation layer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1AnnotationLayerPkPutTest() throws ApiException {
        AnnotationLayerRestApiPut body = null;
        Integer pk = null;
        InlineResponse2004 response = api.apiV1AnnotationLayerPkPut(body, pk);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create an Annotation layer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1AnnotationLayerPostTest() throws ApiException {
        AnnotationLayerRestApiPost body = null;
        InlineResponse201 response = api.apiV1AnnotationLayerPost(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1AnnotationLayerRelatedColumnNameGetTest() throws ApiException {
        String columnName = null;
        GetRelatedSchema q = null;
        RelatedResponseSchema response = api.apiV1AnnotationLayerRelatedColumnNameGet(columnName, q);

        // TODO: test validations
    }
}
