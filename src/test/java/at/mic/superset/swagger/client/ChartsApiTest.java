/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client;

import at.mic.superset.swagger.ApiException;
import at.mic.superset.swagger.client.model.ChartCacheScreenshotResponseSchema;
import at.mic.superset.swagger.client.model.ChartDataAsyncResponseSchema;
import at.mic.superset.swagger.client.model.ChartDataQueryContextSchema;
import at.mic.superset.swagger.client.model.ChartDataResponseSchema;
import at.mic.superset.swagger.client.model.ChartRestApiPost;
import at.mic.superset.swagger.client.model.ChartRestApiPut;
import java.io.File;
import at.mic.superset.swagger.client.model.GetDeleteIdsSchema;
import at.mic.superset.swagger.client.model.GetExportIdsSchema;
import at.mic.superset.swagger.client.model.GetFavStarIdsSchema;
import at.mic.superset.swagger.client.model.GetInfoSchema;
import at.mic.superset.swagger.client.model.GetItemSchema;
import at.mic.superset.swagger.client.model.GetListSchema;
import at.mic.superset.swagger.client.model.GetRelatedSchema;
import at.mic.superset.swagger.client.model.InlineResponse20010;
import at.mic.superset.swagger.client.model.InlineResponse20011;
import at.mic.superset.swagger.client.model.InlineResponse2002;
import at.mic.superset.swagger.client.model.InlineResponse2009;
import at.mic.superset.swagger.client.model.InlineResponse2012;
import at.mic.superset.swagger.client.model.InlineResponse400;
import at.mic.superset.swagger.client.model.RelatedResponseSchema;
import at.mic.superset.swagger.client.model.ScreenshotQuerySchema;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChartsApi
 */
@Ignore
public class ChartsApiTest {

    private final ChartsApi api = new ChartsApi();

    /**
     * 
     *
     * Takes a query context cache key and returns payload data response for the given query.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1ChartDataCacheKeyGetTest() throws ApiException {
        String cacheKey = null;
        ChartDataResponseSchema response = api.apiV1ChartDataCacheKeyGet(cacheKey);

        // TODO: test validations
    }
    /**
     * 
     *
     * Takes a query context constructed in the client and returns payload data response for the given query.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1ChartDataPostTest() throws ApiException {
        ChartDataQueryContextSchema body = null;
        ChartDataResponseSchema response = api.apiV1ChartDataPost(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes multiple Charts in a bulk operation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1ChartDeleteTest() throws ApiException {
        GetDeleteIdsSchema q = null;
        InlineResponse400 response = api.apiV1ChartDelete(q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Exports multiple charts and downloads them as YAML files
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1ChartExportGetTest() throws ApiException {
        GetExportIdsSchema q = null;
        File response = api.apiV1ChartExportGet(q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Check favorited dashboards for current user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1ChartFavoriteStatusGetTest() throws ApiException {
        GetFavStarIdsSchema q = null;
        GetFavStarIdsSchema response = api.apiV1ChartFavoriteStatusGet(q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1ChartGetTest() throws ApiException {
        GetListSchema q = null;
        InlineResponse2009 response = api.apiV1ChartGet(q);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1ChartImportPostTest() throws ApiException {
        File formData = null;
        Boolean overwrite = null;
        String passwords = null;
        InlineResponse400 response = api.apiV1ChartImportPost(formData, overwrite, passwords);

        // TODO: test validations
    }
    /**
     * 
     *
     * Several metadata information about chart API endpoints.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1ChartInfoGetTest() throws ApiException {
        GetInfoSchema q = null;
        InlineResponse2002 response = api.apiV1ChartInfoGet(q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Compute and cache a screenshot.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1ChartPkCacheScreenshotGetTest() throws ApiException {
        Integer pk = null;
        ScreenshotQuerySchema q = null;
        ChartCacheScreenshotResponseSchema response = api.apiV1ChartPkCacheScreenshotGet(pk, q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Takes a chart ID and uses the query context stored when the chart was saved to return payload data response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1ChartPkDataGetTest() throws ApiException {
        Integer pk = null;
        String format = null;
        String type = null;
        ChartDataResponseSchema response = api.apiV1ChartPkDataGet(pk, format, type);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes a Chart.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1ChartPkDeleteTest() throws ApiException {
        Integer pk = null;
        InlineResponse400 response = api.apiV1ChartPkDelete(pk);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get a chart detail information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1ChartPkGetTest() throws ApiException {
        Integer pk = null;
        GetItemSchema q = null;
        InlineResponse20010 response = api.apiV1ChartPkGet(pk, q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Changes a Chart.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1ChartPkPutTest() throws ApiException {
        ChartRestApiPut body = null;
        Integer pk = null;
        InlineResponse20011 response = api.apiV1ChartPkPut(body, pk);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get a computed screenshot from cache.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1ChartPkScreenshotDigestGetTest() throws ApiException {
        Integer pk = null;
        String digest = null;
        File response = api.apiV1ChartPkScreenshotDigestGet(pk, digest);

        // TODO: test validations
    }
    /**
     * 
     *
     * Compute or get already computed chart thumbnail from cache.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1ChartPkThumbnailDigestGetTest() throws ApiException {
        Integer pk = null;
        String digest = null;
        File response = api.apiV1ChartPkThumbnailDigestGet(pk, digest);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create a new Chart.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1ChartPostTest() throws ApiException {
        ChartRestApiPost body = null;
        InlineResponse2012 response = api.apiV1ChartPost(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get a list of all possible owners for a chart. Use &#x60;owners&#x60; has the &#x60;column_name&#x60; parameter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1ChartRelatedColumnNameGetTest() throws ApiException {
        String columnName = null;
        GetRelatedSchema q = null;
        RelatedResponseSchema response = api.apiV1ChartRelatedColumnNameGet(columnName, q);

        // TODO: test validations
    }
}
