/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package at.mic.superset.swagger.client;

import at.mic.superset.swagger.ApiException;
import at.mic.superset.swagger.client.model.DashboardRestApiPost;
import at.mic.superset.swagger.client.model.DashboardRestApiPut;
import java.io.File;
import at.mic.superset.swagger.client.model.GetInfoSchema;
import at.mic.superset.swagger.client.model.GetItemSchema;
import at.mic.superset.swagger.client.model.GetListSchema;
import at.mic.superset.swagger.client.model.InlineResponse2001;
import at.mic.superset.swagger.client.model.InlineResponse2003;
import at.mic.superset.swagger.client.model.InlineResponse2007;
import at.mic.superset.swagger.client.model.InlineResponse2008;
import at.mic.superset.swagger.client.model.InlineResponse2009;
import at.mic.superset.swagger.client.model.InlineResponse2011;
import at.mic.superset.swagger.client.model.InlineResponse400;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DashboardsApi
 */
@Ignore
public class DashboardsApiTest {

    private final DashboardsApi api = new DashboardsApi();

    /**
     * 
     *
     * Deletes multiple Dashboards in a bulk operation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dashboardDeleteTest() throws ApiException {
        List<Integer> q = null;
        InlineResponse400 response = api.dashboardDelete(q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Exports multiple Dashboards and downloads them as YAML files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dashboardExportGetTest() throws ApiException {
        List<Integer> q = null;
        String response = api.dashboardExportGet(q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get a list of dashboards, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dashboardGetTest() throws ApiException {
        GetListSchema q = null;
        InlineResponse2007 response = api.dashboardGet(q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Several metadata information about dashboard API endpoints.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dashboardInfoGetTest() throws ApiException {
        GetInfoSchema q = null;
        InlineResponse2001 response = api.dashboardInfoGet(q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes a Dashboard.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dashboardPkDeleteTest() throws ApiException {
        Integer pk = null;
        InlineResponse400 response = api.dashboardPkDelete(pk);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get a dashboard detail information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dashboardPkGetTest() throws ApiException {
        Integer pk = null;
        GetItemSchema q = null;
        InlineResponse2008 response = api.dashboardPkGet(pk, q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Changes a Dashboard.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dashboardPkPutTest() throws ApiException {
        DashboardRestApiPut body = null;
        Integer pk = null;
        InlineResponse2009 response = api.dashboardPkPut(body, pk);

        // TODO: test validations
    }
    /**
     * 
     *
     * Compute async or get already computed dashboard thumbnail from cache.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dashboardPkThumbnailDigestGetTest() throws ApiException {
        Integer pk = null;
        String digest = null;
        Object q = null;
        File response = api.dashboardPkThumbnailDigestGet(pk, digest, q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create a new Dashboard.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dashboardPostTest() throws ApiException {
        DashboardRestApiPost body = null;
        InlineResponse2011 response = api.dashboardPost(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get a list of all possible owners for a dashboard.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dashboardRelatedColumnNameGetTest() throws ApiException {
        String columnName = null;
        Object q = null;
        InlineResponse2003 response = api.dashboardRelatedColumnNameGet(columnName, q);

        // TODO: test validations
    }
}
